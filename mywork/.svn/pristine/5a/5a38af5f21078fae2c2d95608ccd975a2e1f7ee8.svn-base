<?php
//set_time_limit( 10 );
class GameAbModel {
  public $responseArr;
  public $curlError;
  public $err;
  protected $cfg_base_url = 'https://api3.abgapi.net';
  protected $cfg_agent = '555u1yn';
  protected $cfg_property_id = 5828193;
  //protected $cfg_des = 'cV2ItK63A/gucR2EmaX5+jR9STdnQNFtu2K5gic6IM'."\0";
  protected $cfg_des = 'gucR2EmaX5+jR9STdnQNFtu2K5gic6IM';
  protected $cfg_md5 = 'm9c2fmZOJi46Aet+im5+Q9nni54nezylMWWg230kheM=';
  protected $cfg_iv = 'AAAAAAAAAAA=';
  protected $cfg_app_suffix = 'zl8';
  /*
  
  protected $cfg_agent = 'fen9uyn';
  protected $cfg_property_id = 7433263;
  protected $cfg_des = 'cV2ItK63A/SrdWVVeT4dzuW4mpTOJeYN';
  protected $cfg_md5 = 'rCQPHaUEx3/0MfNpgv96C/RJD45fNBtB/rANzgpzp+s=';
  protected $cfg_iv = 'AAAAAAAAAAA=';
  protected $cfg_app_suffix = 'fe1';*/

  const AB_RESPONSE_SUCCESS_CODE = 'OK';
  const AB_DEFAULT_REQUEST_METHOD = 'POST';
  const AB_CURL_CONNECTTIMEOUT_MS = 8000;
  const AB_CURL_TIMEOUT_MS = 28000;
  const AB_DEFAULT_LANG_CODE = 'zh_TW';
  const AB_HANDICAP_MAX_WIN_LIMIT = 60000;
  const AB_HANDICAP_MAX_LOSE_LIMIT = 0;  //0=no limit

  const AB_REPORT_DATETIME_FORMAT = 'Y-m-d H:i:s';
  const AB_REPORT_DATE_FORMAT = 'Y-m-d';
  const AB_REPORT_TIMEZONE_OFFSET = '+8';

  const AB_API_ERRORS = array(
    'INTERNAL_ERROR' => '服務端錯誤',
    'ILLEGAL_ARGUMENT' => '參數錯誤',
    'SYSTEM_MATAINING' => '系統維護狀態',
    'AGENT_NOT_EXIST' => '代理商不存在',
    'CLIENT_EXIST' => '客戶已存在',
    'CLIENT_PASSWORD_INCORRECT' => '密碼錯誤',
    'TOO_FREQUENT_REQUEST' => '請求過於頻繁',
    'CLIENT_NOT_EXIST' => '客戶不存在',
    'TRANS_EXISTED:' => '轉帳記錄已存在',
    'LACK_OF_MONEY' => '額度轉出的代理商或者客戶額度不足',
    'DUPLICATE_CONFIRM' => '重複確認轉帳',
    'TRANS_NOT_EXIST' => '轉帳記錄不存在',
    'DECRYPTION_FAILURE' => '解密失敗',
    'FORBIDDEN' => '禁止操作, 請求IP未在白名單中',
    'INCONSISTENT_WITH_PRE_TRANS' => '確認轉帳信息與預轉帳提交信息不一致',
    'INVALID_PROPERTYID' => '無效的PropertyId',
    'INVALID_SIGN' => '無效簽名',
    'TRANS_FAILURE' => '轉帳失敗',
  );

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

	//--------------------非通用函數--------------------

	/**
	 * 註冊新會員
	 * @param $data['user_name'] 會員帳號
	 * @param $data['password'] 會員密碼
   * @param $data['normal_handicap'] 一般盤口
   * @param $data['vip_handicap'] VIP 盤口
   * @param $data['daily_max_win_limit'] 每日最高贏額
   * @param $data['daily_max_lose_limit'] 每日最高輸額
   * @param &$err 盛裝錯誤(非必須)
	 * @return 結果(bool)
	 */
	public function createMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
      'normal_handicap' => array('required'=>1,),
      'vip_handicap' => array('required'=>1,),
      'daily_max_win_limit' => array('required'=>1,),
      'daily_max_lose_limit' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }

    $arrParam = array();
    $arrParam['client'] = $_user_name;
    $arrParam['password'] = $_password;
    $arrParam['maxWin'] = intVal($_daily_max_win_limit);
    $arrParam['maxLost'] = intVal($_daily_max_lose_limit);
    $arrParam['vipHandicaps'] = $_vip_handicap;
    $arrParam['orHandicaps'] = $_normal_handicap;
    $arrParam['orHallRebate'] = 0;  //洗碼比
    //var_dump($arrParam);exit();

    $url = $this->cfg_base_url."/check_or_create";
    $result = $this->_sendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        $argErr = null;
        return true;
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')) . ': ' . $this->_produceError($result['error_code'], $result['message']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 會員登入
   * @param $data['user_name'] 會員帳號
   * @param $data['password'] 會員密碼
   * @param $data['language'] 語系代碼(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL(string)
	 */
	public function loginMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
      'language' => array('required'=>0,'default'=>self::AB_DEFAULT_LANG_CODE),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }

    $arrParam = array();
    $arrParam['client'] = $_user_name;
    $arrParam['password'] = $_password;
    $arrParam['language'] = $_language;

    $url = $this->cfg_base_url."/forward_game";
    $result = $this->_sendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        $argErr = null;
        return $result['gameLoginUrl'];
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')) . ': ' . $this->_produceError($result['error_code'], $result['message']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 取得會員餘額
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額(number)
	 */
	public function getMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }
    $arrParam = array();
    $arrParam['client'] = $_user_name;
    $arrParam['password'] = $_password;

    $url = $this->cfg_base_url."/get_balance";
    $result = $this->_sendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        $argErr = null;
        return $result['balance'];
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')) . ': ' . $this->_produceError($result['error_code'], $result['message']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 下點(提款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 交易號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(array)
   *         array(
                'account' => 會員帳號,
                'amount' => 數額,
                'balance' => 交易後餘額,
                'transid' => 交易號,
              );
	 */
	public function withdrawMemberBalance($arrDatas, &$argErr = null){
    $transType = 'OUT';

    return $this->_transfer(
      $transType,
      $arrDatas,
      $argErr
    );
	}

	/**
	 * 上點(加款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 交易號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(array)
   *         array(
                'account' => 會員帳號,
                'amount' => 數額,
                'balance' => 交易後餘額,
                'transid' => 交易號,
              );
   */
	public function rechargeMemberBalance($arrDatas, &$argErr = null){
    $transType = 'IN';

    return $this->_transfer(
      $transType,
      $arrDatas,
      $argErr
    );
	}

	/**
	 * 抓取注單報表
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
   *
   * 用于查询 30 天内任意时间段(最多 60 分钟)的客户的投注记录.
   * 调用次数限制: 8 次/10 分钟 (以每个 propertyId 计算)
   * 调用次数限制用以控制调用这个 API 的频率，客户调用这个 API 的频率不能大过限制
	 */
	public function getGameRecord($arrDatas, &$argErr = null){
    $arrKeys = array(
      'begin_datetime' => array('required'=>1,),
      'end_datetime' => array('required'=>1,),
      'agent' => array('required'=>0,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }
    $beginDatetime = strtotime($_begin_datetime);
    $endDatetime = strtotime($_end_datetime);
    if ( ($endDatetime-$beginDatetime) > (60*60) ) {
      $endDatetime = $beginDatetime + (60*60);
    }
    $arrParam = array();
    $arrParam['startTime'] = date(self::AB_REPORT_DATETIME_FORMAT, $beginDatetime);
    $arrParam['endTime'] = date(self::AB_REPORT_DATETIME_FORMAT, $endDatetime);
    if (isset($_agent)) {
      $arrParam['agent'] = trim($_agent);
    }

    $url = $this->cfg_base_url."/betlog_pieceof_histories_in30days";
    $result = $this->_sendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        if (isset($result['histories'])) {
          $argErr = null;
          return $result['histories'];
        } else {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //必需索引不存在或為空: histories
          return false;
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03')) . ': ' . $this->_produceError($result['error_code'], $result['message']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04'));  //CURL 結果為不成功
    return false;
	}

  /**
   * 取得盤口資料
   * @param $arrBetIds 要標記的注單ID 陣列(array)
   * @param &$err 盛裝錯誤(非必須)
   * @return 執行結果(bool)
   */
  public function queryHandicap(&$argErr=null, &$arrHandicaps=null) {
    $arrParam = array();

    $url = $this->cfg_base_url."/query_handicap";
    $result = $this->_sendRequest($url, $arrParam);
    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        $ary = $result['handicaps'];
        $a = array();
        $b = array();
        for ($i=0; $i<sizeof($ary); ++$i) {
          $arrTemp = $ary[$i];
          if ($arrTemp['handicapType']==0) {  //一般盤口
            $arrHandicaps['normal'][] = $arrTemp;
            if (sizeof($b)<3) {
              $b[] = $arrTemp['id'];
            }
          }
          if ($arrTemp['handicapType']==1) {  //VIP盤手
            $arrHandicaps['vip'][] = $arrTemp;
            if (sizeof($a)<1) {
              $a[] = $arrTemp['id'];
            }
          }
        }
        $vipHandicap = implode(',',$a);
        $normalHandicap = implode(',',$b);
        var_dump($ary);
        var_dump($normalHandicap);
        var_dump($vipHandicap);
        //$arrHandicaps['normal'] = $this->_vipHandicap;
        //$arrHandicaps['vip'] = $this->_normalHandicap;
        //Dbgr::preout($this->_vipHandicap);
        //Dbgr::preout($this->_normalHandicap);
        $argErr = null;
        return true;
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //CURL結果為不成功
    return false;
  }

	//--------------------非通用函數--------------------

  /* _getDgHash: */
  protected function _getDgHash($argStr) {
    return hash(self::AB_HASH_METHOD, $argStr);
  }

  /* _transfer: 上下點 */
  protected function _transfer(
    $argTransType, //IN=存款, OUT=提款
    $argDatas,
    &$argErr = null
    ) {

    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
      'trans_id' => array('required'=>0,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $argDatas) ) {
        $temp = "_{$dk}";
        $$temp = $argDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $argDatas[$dk];
          }
        }
      }
    }

    if ( array_key_exists('trans_id', $argDatas) ) {
      $transId = $argDatas['trans_id'];
    } else {
      $transId = $this->_getTid($_user_name, $argTransType);
    }

    $transType = strtoupper($argTransType);
    if ($transType == 'IN') {
      $operFlag = 1;
    } else {
      $transType = 'OUT';
      $operFlag = 0;
    }
    $arrParam = array();
    $arrParam['client'] = $_user_name;
    $arrParam['credit'] = abs(intVal($_amount));
    $arrParam['operFlag'] = $operFlag;  //0=withdraw, 1=deposit
    $arrParam['sn'] = $transId;  //$this->_getTid($argMemberName, $transType);

    $url = $this->cfg_base_url."/agent_client_transfer";
    $result = $this->_sendRequest($url,$arrParam);

    if ($result!==false) {
      if ($result && empty($result['apiError']) && ($result['error_code']===self::AB_RESPONSE_SUCCESS_CODE)) {  //成功
        $argErr = null;
        return true;
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL結果為不成功
    return false;
  }

  /* produce error */
  protected function _produceError($argErrCode,$argErrMsg=null) {
    if ($argErrMsg !== null) {
      /*return array(
        'errorCode' => $argErrCode,
        'errorMsg' => $argErrMsg,
      );*/
      return "{$argErrMsg} (code {$argErrCode})";
    } else {
      if ( self::AB_API_ERRORS === null) {
        /*return array(
          'errorCode' => -1,
          'errorMsg' => 'DG errors definition is not found',
        );*/
        return 'AB errors definition is not found';
      }
      $arrErrorMsgs = self::AB_API_ERRORS;
      if (array_key_exists($argErrCode,$arrErrorMsgs)) {
        /*return array(
          'errorCode' => $argErrCode,
          'errorMsg' => $arrErrorMsgs[$argErrCode],
        );*/
        return "{$arrErrorMsgs[$argErrCode]} (code {$argErrCode})";
      } else {
        /*return array(
          'errorCode' => $argErrCode,
          'errorMsg' => '錯誤說明未定義, 錯誤代碼: '.$argErrCode,
        );*/
        return '錯誤說明未定義, 錯誤代碼: '.$argErrCode;
      }
    }
  }

  /* send request */
  protected function _sendRequest($argUrl, $argArrData, $argMethod=self::AB_DEFAULT_REQUEST_METHOD) {
    $key = $this->_getKey();
    $arrData = $argArrData;

    $arrData['random'] = mt_rand();
    if (!isset($arrData['agent'])) {
      $arrData['agent'] = $this->cfg_agent;
    }
    $queryStr = http_build_query($arrData);

    $arr = [];
    $arr['data'] = $this->_3DESEncrypt( $queryStr );
    $arr['sign'] = $this->_getSign($arr['data']);
    $arr['propertyId'] = $this->cfg_property_id;

    //Dbgr::preout($arr);

    $method = strtoupper($argMethod);
    $arrHeader = array();
    $arrCurlDatas = array(
      CURLOPT_CUSTOMREQUEST => $method,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_SSL_VERIFYHOST => false,
      CURLOPT_SSL_VERIFYPEER => false,
      CURLOPT_CONNECTTIMEOUT_MS => self::AB_CURL_CONNECTTIMEOUT_MS,
      CURLOPT_TIMEOUT_MS => self::AB_CURL_TIMEOUT_MS,
      CURLOPT_HTTPHEADER => $arrHeader
    );
    if ( $method == 'GET') {  //GET
      $dataStr = http_build_query($arr);
      $url = "{$argUrl}?{$dataStr}";
    } else {  //POST
      $url = $argUrl;
      $dataStr = http_build_query($arr);
      $arrCurlDatas[CURLOPT_POST] = true;
      $arrCurlDatas[CURLOPT_POSTFIELDS] = $dataStr;
    }

    $ch = curl_init($url);
    foreach ($arrCurlDatas as $cKey => $cVal ) {
      curl_setopt($ch, $cKey, $cVal);
    }
    $result = curl_exec($ch);

    if (curl_errno($ch)) {
      $this->curlError = array(
        'curl_error' => curl_error($ch),
        'curl_errno' => curl_errno($ch),
      );
    } else {
      $this->curlError = null;
    }
    curl_close($ch);

    //var_dump($url);
    //var_dump($arrCurlDatas);
    //Dbgr::preout($result);
    //var_dump($curlError);

    if ($result !== false) {
      $resultInAssoc = json_decode($result,true, 512, JSON_BIGINT_AS_STRING);  //decoded as assoc. array
      //Dbgr::preout($resultInAssoc);
      $this->responseArr = $resultInAssoc;
      return $resultInAssoc;
    } else {
      //echo "sendRequest::curlError={$curlError} <br/>";
      return false;
    }
  }

  /* get transaction id */
  protected function _getTid($argAccount, $argTransactionType='IN') {
    $t = $this->_getTidTime();
    return substr( $this->cfg_property_id . $t . md5(microtime().$argAccount), 0, 20 );
  }

  /* get formatted time for transaction id */
  protected function _getTidTime() {
    return date('ymdHis');
  }

  /* get key for eavery action */
  protected function _getKey($argAgName=null,$argApiKey=null) {
    if ($argAgName===null) {
      $argAgName = $this->cfg_agent;
    }
    if ($argApiKey===null) {
      //$argApiKey = $this->apiKey;
    }
    //$key = hash('md5',"{$argAgName}{$argApiKey}");
    //$key = self::_getDgHash("{$argAgName}{$argApiKey}");
    $key = '';
    return $key;
  }

  /* _getSign: 認證用 */
  protected function _getSign($argStr) {
    return base64_encode( md5($argStr.$this->cfg_md5, true) );
  }

  /*3des encryption*/
  protected function _3DESEncrypt($str){
    $pz = mcrypt_get_block_size(MCRYPT_TRIPLEDES,MCRYPT_MODE_CBC);
    $pad = $pz-( strlen( $str ) % $pz );
    return base64_encode(
      mcrypt_encrypt(
        MCRYPT_TRIPLEDES,
        base64_decode( $this->cfg_des ),
        $str . str_repeat( chr($pad), $pad ),
        MCRYPT_MODE_CBC,
        base64_decode( $this->cfg_iv )
      )
    );
  }

}