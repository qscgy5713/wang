<?php

class GameSpModel {
  public $responseArr;
  public $curlError;
  public $err;

  protected $cfg_api_name = 'api';
  protected $cfg_base_url = 'http://apiball.king588.net';
  protected $cfg_ag_url = 'http://ag.king588.net';
  protected $cfg_encode_key = 'WGI@X9ENgpo138jL';
  protected $cfg_base_ag_name = 'G53890';
  protected $cfg_base_ag_pass = 'bbqq1234';
  protected $cfg_boss_name = 'G';

  const SP_ENCRYPTION_IV = 'm%2qQ7L&wfafUj&b';
  const SP_ACCOUNT_LEVEL_MEMBER = 1;
  const SP_ACCOUNT_LEVEL_AGENT = 2;
  const SP_ACCOUNT_LEVEL_DIRECTOR = 3;  //總監
  const SP_RESPONSE_SUCCESS_CODE = 999;
  const SP_DEFAULT_REQUEST_METHOD = 'GET';
  const SP_DEFAULT_BET_ROW_PAGE_SIZE = 100;

  const SP_BALL_TYPE_ALL =  0;  //球類-所有
  /*
  SP_BALL_TYPE= 0: 全部, 1: 美棒, 2: 日棒, 3: 台棒, 4: 韓棒, 5: 冰球, 6: 籃球, 7: 彩球, 8: 美足, 9: 網球, 10: 足球, 11: 指數, 12: 賽馬, 14: 其他
  */
  const SP_BET_TYPE_ALL =  0;  //玩法-所有

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

	//--------------------非通用函數--------------------

	/**
	 * 註冊新會員
	 * @param $data['user_name'] 會員帳號
   * @param $data['password'] 會員密碼
   * @param $data['nickname'] 會員暱稱
   * @param &$err 盛裝錯誤(非必須)
	 * @return 結果 (bool)
	 */
	public function createMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
      'nickname' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $act = 'add';
    $func = 'account';
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";
    $data = array(
      "act" => $act,
      "account" => $_user_name,
      "nickname" => $_nickname,
      "passwd" => $_password,
      "level" => self::SP_ACCOUNT_LEVEL_MEMBER,
      "up_account" => $this->cfg_base_ag_name,
      "up_passwd" => $this->cfg_base_ag_pass,
    );
    var_dump($data);

    $arrColsNeedEnc = array(
      'account', 'passwd', 'up_account', 'up_passwd'
    );
    $result = $this->_sendRequest($url,$data,$arrColsNeedEnc);
    //var_dump($result);
    if ($result !== false) {
      if ($result && isset($result['code']) && ($result['code']==self::SP_RESPONSE_SUCCESS_CODE)) {
        $argErr = null;
        return true;
      } else {
        $errCode = $result['code'];
        $errMsg = $result['msg'];
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($errCode,$errMsg);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 會員登入
   * @param $data['user_name'] 會員帳號
   * @param $data['password'] 會員密碼
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL(string)
	 */
	public function loginMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $func = 'login';
    $argErr = null;
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";

    $arrRet = array(
      "account" => $this->_encrypt($_user_name),
      "passwd" => $this->_encrypt($_password),
    );

    $qStr = http_build_query($arrRet);
    $gameLink = "{$url}?{$qStr}";
    return $gameLink;
//-------

	}

	/**
	 * 取得會員餘額
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額 (number)
	 */
	public function getMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    $act = 'search';
    $func = 'points';
    $argErr = null;
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";
    $data = array(
      "act" => $act,
      "account" => $_user_name,
      "up_account" => $this->cfg_base_ag_name,
      "up_passwd" => $this->cfg_base_ag_pass,
    );
    //Dbgr::preout($data);

    $arrColsNeedEnc = array(
      'account', 'up_account', 'up_passwd'
    );
    $result = $this->_sendRequest($url,$data,$arrColsNeedEnc);
    if (!($result===false)) {
      if ($result && isset($result['code']) && ($result['code']==self::SP_RESPONSE_SUCCESS_CODE)) {
        if (isset($result['data']['point'])) {
          $curntPoint = $result['data']['point'];
          return $curntPoint;
        }
      } else {
        $errCode = $result['code'];
        $errMsg = $result['msg'];
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($errCode,$errMsg);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 下點(提款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param &$err 盛裝錯誤(非必須)
   * @return 交易後餘額 (number),
	 */
	public function withdrawMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $act = 'sub';
    $func = 'points';
    $argErr = null;
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";
    $data = array(
      "act" => $act,
      "account" => $_user_name,
      "point" => $_amount,
      "status_id" => '',  //optional
      "up_account" => $this->cfg_base_ag_name,
      "up_passwd" => $this->cfg_base_ag_pass,
    );

    $arrColsNeedEnc = array(
      'account', 'up_account', 'up_passwd'
    );
    $result = $this->_sendRequest($url,$data,$arrColsNeedEnc);
    if (!($result===false)) {
      if ($result && isset($result['code']) && ($result['code']==self::SP_RESPONSE_SUCCESS_CODE)) {
        if (isset($result['data']['point'])) {
          $curntPoint = $result['data']['point'];
          return $curntPoint;
        }
      } else {
        $errCode = $result['code'];
        $errMsg = $result['msg'];
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($errCode,$errMsg);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 上點(加款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param &$err 盛裝錯誤(非必須)
   * @return 交易後餘額 (number),
   */
	public function rechargeMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $act = 'add';
    $func = 'points';
    $argErr = null;
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";
    $data = array(
      "act" => $act,
      "account" => $_user_name,
      "point" => $_amount,
      "status_id" => '',  //optional
      "up_account" => $this->cfg_base_ag_name,
      "up_passwd" => $this->cfg_base_ag_pass,
    );

    $arrColsNeedEnc = array(
      'account', 'up_account', 'up_passwd'
    );
    $result = $this->_sendRequest($url,$data,$arrColsNeedEnc);
    if (!($result===false)) {
      if ($result && isset($result['code']) && ($result['code']==self::SP_RESPONSE_SUCCESS_CODE)) {
        if (isset($result['data']['point'])) {
          $curntPoint = $result['data']['point'];
          return $curntPoint;
        }
      } else {
        $errCode = $result['code'];
        $errMsg = $result['msg'];
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($errCode,$errMsg);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 抓取注單報表。要注意必須傳入會員ID的陣列，可以透過 GameSPModel::getTotalReportWithMembers 方法取得
   * 頂層代理下的會員總結，即可得到會員ID。
   *
   * @param $data['begin_date'] 起始日期 (Y-m-d)
   * @param $data['end_date'] 結束日期 (Y-m-d)
   * @param $data['array_user_names'] 查詢的代理或用戶名稱，必須是一維陣列
   * @param $data['account_level'] (非必須) 傳入的用戶階級 (總監，代理，會員)。預設=會員
   * @param $data['ball_type'] (非必須) 欲查詢的球種。預設=全部球類
   * @param $data['bet_type'] (非必須) 欲查詢的玩法。預設=全部玩法
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
	 */
	public function getGameRecord($arrDatas, &$argErr = null){
    $arrKeys = array(
      'begin_date' => array('required'=>1,),
      'end_date' => array('required'=>1,),
      'array_user_names' => array('required'=>1,),
      'account_level' => array('required'=>0,'default'=>self::SP_ACCOUNT_LEVEL_MEMBER,),
      'ball_type' => array('required'=>0,'default'=>self::SP_BALL_TYPE_ALL,),
      'bet_type' => array('required'=>0,'default'=>self::SP_BET_TYPE_ALL,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $act = 'detail';
    $arrDetails = $this->_getReport($act, $_begin_date, $_end_date, $_array_user_names, $argErr, $_account_level, $_ball_type, $_bet_type);
    return $arrDetails;
	}

  /**
   * 抓取會員OR代理的總結。可查詢代理下帳務總結(包含各會員的總結)
   *
   * @param $data['begin_date'] 起始日期 (Y-m-d)
   * @param $data['end_date'] 結束日期 (Y-m-d)
   * @param $data['array_user_names'] (非必須) 查詢的代理或用戶名稱，必須是一維陣列。預設=頂層代理名稱
   * @param $data['account_level'] (非必須) 傳入的用戶階級 (總監，代理，會員)。預設=代理
   * @param $data['ball_type'] (非必須) 欲查詢的球種。預設=全部球類
   * @param $data['bet_type'] (非必須) 欲查詢的玩法。預設=全部玩法
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表總結(array)
   */
  public function getTotalReportWithMembers($arrDatas, &$argErr = null) {
    $arrKeys = array(
      'begin_date' => array('required'=>1,),
      'end_date' => array('required'=>1,),
      'array_user_names' => array('required'=>0,'default'=>array($this->cfg_base_ag_name)),
      'account_level' => array('required'=>0,'default'=>self::SP_ACCOUNT_LEVEL_AGENT,),
      'ball_type' => array('required'=>0,'default'=>self::SP_BALL_TYPE_ALL,),
      'bet_type' => array('required'=>0,'default'=>self::SP_BET_TYPE_ALL,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $act = 'memberTotal';
    $res = $this->_getReport($act, $_begin_date, $_end_date, $_array_user_names, $argErr, $_account_level, $_ball_type, $_bet_type);
    return $res;
  }

	//--------------------非通用函數--------------------


  /* get report */
  //查詢會員或代理帳務
  protected function _getReport(
    $argAct,
    $argBeginDate,
    $argEndDate,
    $argArrAccounts,  //帳號陣列
    &$argErr,
    $argAccountLevel=self::SP_ACCOUNT_LEVEL_DIRECTOR,  //帳號等級=3:總代理, 2:代理, 1:會員
    $argBallType=self::SP_BALL_TYPE_ALL,  //球類
    $argBetType=self::SP_BET_TYPE_ALL  //玩法
    ) {
    $func = 'report';
    $argErr = null;
    $apiUrl = $this->cfg_base_url;
    $apiName = $this->cfg_api_name;
    $url = "{$apiUrl}/{$apiName}/{$func}";
    $accuntStr = implode(',',$argArrAccounts);
    $beginDate = date('Y-m-d',strtotime($argBeginDate));
    $endDate = date('Y-m-d',strtotime($argEndDate));
    $data = array(
      "act" => $argAct,
      "account" => $accuntStr,
      "level" => $argAccountLevel,
      "s_date" => $beginDate,
      "e_date" => $endDate,
      "ball" => $argBallType,
      "type" => $argBetType,
      "up_account" => $this->cfg_base_ag_name,
      "up_passwd" => $this->cfg_base_ag_pass,
    );

    $arrColsNeedEnc = array(
      'account', 'up_account', 'up_passwd'
    );
    $result = $this->_sendRequest($url,$data,$arrColsNeedEnc);

    if (!($result===false)) {
      if ($result && isset($result['code']) && ($result['code']==self::SP_RESPONSE_SUCCESS_CODE)) {
        if (isset($result['data'])) {
          $arrDetailedReport = $result['data'];
          return $arrDetailedReport;
        }
      } else {
        $errCode = $result['code'];
        $errMsg = $result['msg'];
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01')).": ".$this->_produceError($errCode,$errMsg);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //CURL 結果為不成功
    return false;
  }

  /* get aes key */
  protected function _getEncKey() {
    return $this->cfg_encode_key;
  }

  protected function _decrypt($encryptedData) {
    $cipher = MCRYPT_RIJNDAEL_128;
    $mode = MCRYPT_MODE_CBC;
    $key = $this->_getEncKey();
    $iv = self::SP_ENCRYPTION_IV;
    $initializationVectorSize = mcrypt_get_iv_size($cipher, $mode);

    $data =  mcrypt_decrypt(
        $cipher,
        $key,
        base64_decode($encryptedData),
        $mode,
        $iv
    );
    $pad = ord($data[strlen($data) - 1]);
    return substr($data, 0, -$pad);
  }

  // 加密
  protected function _encrypt($xml_data) {
    $cipher = MCRYPT_RIJNDAEL_128;
    $mode = MCRYPT_MODE_CBC;
    $key = $this->_getEncKey();
    $iv = self::SP_ENCRYPTION_IV;
    $blockSize = mcrypt_get_block_size($cipher, $mode);
    $pad = $blockSize - (strlen($xml_data) % $blockSize);

    return base64_encode(mcrypt_encrypt(
        $cipher,
        $key,
        $xml_data . str_repeat(chr($pad), $pad),
        $mode,
        $iv
    ));
  }

  /* produce error */
  protected function _produceError($argErrCode,$argErrMsg=null) {
    $arrErrorMsgs = array(
      /*900 => 'general error',  //
      901 => 'invalid account or password',  //
      902 => 'account has been locked',  //
      911 => 'account not exists',  //
      921 => 'insufficient credit',  //
      941 => 'log not exists',  //
      912 => 'account has been used',*/
    );
    if ($argErrMsg) {
      return "{$argErrMsg} (code {$argErrCode})";
    } else {
      if (array_key_exists($argErrCode,$arrErrorMsgs)) {
        return "{$arrErrorMsgs[$argErrCode]} (code {$argErrCode})";
      } else {
        return "{$argErrMsg} (code {$argErrCode})";
      }
    }
  }

  /* send http request via curl and return its response in assoc array */
  protected function _sendRequest($argUrl,$argArrData,$argArrColsNeedEnc,$argReturnOrgResp=false,$argMethod=self::SP_DEFAULT_REQUEST_METHOD) {
    //var_dump($argArrData);
    foreach ($argArrColsNeedEnc as $cKey=>$cVal) {
      if (array_key_exists($cVal,$argArrData)) {
        $enc = $this->_encrypt($argArrData[$cVal]);
        //echo "enc({$argArrData[$cVal]}) = {$enc}, ";
        $argArrData[$cVal] = $enc;
      }
    }
    $queryStr = http_build_query($argArrData);
    $arrCurlDatas = array(
      CURLOPT_CUSTOMREQUEST => $argMethod,
      //CURLOPT_POSTFIELDS => $argArrData,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_CONNECTTIMEOUT_MS => 10000,
      CURLOPT_TIMEOUT_MS => 15000,
      CURLOPT_HTTPHEADER => array(
        'Content-Type: text/html; charset=utf-8',
      )
    );
    $url = "{$argUrl}?{$queryStr}";
    if (strtoupper($argMethod) == 'POST') {
      $url = $argUrl;
      $arrCurlDatas[CURLOPT_POSTFIELDS] = $argArrData;
    } else {
      //...
    }
    //echo "\$url={$url} <br/>";
    var_dump($argArrData);
    //var_dump($arrCurlDatas);
    $ch = curl_init($url);
    curl_setopt_array(
      $ch,
      $arrCurlDatas
    );
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
      $this->curlError = array(
        'curl_error' => curl_error($ch),
        'curl_errno' => curl_errno($ch),
      );
    } else {
      $this->curlError = null;
    }
    //var_dump($result);

    //echo "\$result={$result} <br/>";
    curl_close($ch);
    if ($result !== false) {
      if ($argReturnOrgResp === false) {
        $resultInAssoc = json_decode($result,true);  //decoded as assoc. array
        //var_dump($resultInAssoc);
        $this->responseArr = $resultInAssoc;
        return $resultInAssoc;
      } else {
        return $result;
      }
    } else {
      //echo "\$curlError={$curlError} <br/>";
      return false;
    }
  }
}
