<?php
set_time_limit( 20 );
class GameDgModel {
  public $responseArr;
  public $curlError;
  public $err;

	protected $cfg_base_url = 'https://api.dg99web.com';  //https://api.dg99api.com
	protected $cfg_agent = 'DG00160101';
	protected $cfg_app_name_postfix = 'CSS';
	protected $cfg_api_key = '5ae5398d0572442c99b449c35e28cb89';

  const DG_DEFAULT_CURRENCY_ID = 'TWD';
  const DG_RESPONSE_SUCCESS_CODE = 0;
  const DG_MEMBER_STATUS_FREEZE = 0;  //會員狀態:停用
  const DG_MEMBER_STATUS_NORMAL = 1;  //會員狀態:正常
  const DG_MEMBER_STATUS_LOCKED = 2;  //會員狀態:鎖定(不能下注)
  const DG_TRANS_SUCCESS_CODE = 0;
  const DG_TRANS_FAILED_CODE = 324;
  const DG_DEFAULT_LANG_ID = 'tw';
  const DG_DEFAULT_REQUEST_METHOD = 'POST';
  const DG_CURL_CONNECTTIMEOUT_MS = 5000;
  const DG_CURL_TIMEOUT_MS = 15000;
  const DG_APP_ACCOUNT_PREFIX = 'CSY';
  const DG_HASH_METHOD = 'md5';

  const DG_DEVICES = array(
    1 => 'web',  //网站Flash
    2 => 'ios',  //IOS客户端登入
    3 => 'android',  //Android客户端登入
    5 => 'wap',  //网站html5登入
  );

  const DG_WIN_LIMITS = array(
    'A' => array(100, 250000),
    'B' => array(50, 5000),
    'C' => array(50, 10000),
    'D' => array(100, 10000),
    'E' => array(100, 20000),
    'F' => array(100, 50000),
    'G' => array(100, 100000),
  );

  const DG_CURRENCY_CODES = array(
      1 => 'CNY',  //人民币
      2 => 'USD',  //美元
      3 => 'MYR',  //马来西亚币
      4 => 'HKD',  //港币
      5 => 'THB',  //泰珠
      6 => 'SGD',  //新加坡元
      7 => 'PHP',  //菲律宾比索
      8 => 'TWD',  //台币
      9 => 'VND',  //越南盾
     10 => 'IDR',  //印尼(盾)
     11 => 'JPY',  //日元
     12 => 'KHR',  //柬埔寨币
     13 => 'KWR',  //韩元
     16 => 'AUD',  //澳大利亚元
     19 => 'INR',  //印度卢比
     20 => 'EUR',  //欧元
     21 => 'GBP',  //英镑
     22 => 'CAD',  //加拿大
     23 => 'KRW2',   //韩元 已去除3个0，游戏中1块，等同于实际1000块
     24 => 'MMK',  //缅甸币
     25 => 'MMK2',   //缅甸币  已去除3个0，游戏中1块，等同于实际1000块
     29 => 'VND2',   //越南盾  已去除3个0，游戏中1块，等同于实际1000块
     30 => 'IDR2',   //印尼(盾)  已去除3个0，游戏中1块，等同于实际1000块
    100 => 'TEST',   //测试币
  );

  const DG_LANGS = array(
    0 => 'en',  //英文
    1 => 'cn',  //中文简体
    2 => 'tw',  //中文繁体
    3 => 'kr',  //韩语
    4 => 'my',  //缅甸语
    5 => 'th',  //泰语
  );

  const DG_API_ERRORS = array(
      0 => '操作成功 ',
      1 => '參數錯誤',
      2 => 'Token驗證失敗',
      4 => '非法操作',
     10 => '日期格式錯誤',
     11 => '數據格式錯誤',
     97 => '沒有權限',
     98 => '操作失敗',
     99 => '未知錯誤',
    100 => '帳號被鎖定',
    101 => '帳號格式錯誤',
    102 => '帳號不存在',
    103 => '此帳號被佔用',
    104 => '密碼格式錯誤',
    105 => '密碼錯誤',
    106 => '新舊密碼相同',
    107 => '會員帳號不可用',
    108 => '登入失敗',
    109 => '註冊失敗',
    113 => '傳入的代理帳號不是代理',
    114 => '找不到會員',
    116 => '帳號已佔用',
    117 => '找不到會員所屬的分公司',
    118 => '找不到指定的代理',
    119 => '存取款操作時代理點數不足',
    120 => '餘額不足',
    121 => '盈利限制必須大於或等於0',
    150 => '免費試玩帳號用完',
    300 => '系統維護',
    320 => 'API Key 錯誤',
    321 => '找不到相應的限紅組',
    322 => '找不到指定的貨幣類型',
    323 => '轉賬流水號佔用',
    324 => '轉賬失敗',
    325 => '代理狀態不可用',
    326 => '會員代理沒有視頻組',
    328 => 'API 類型找不到',
    329 => '會員代理信息不完整',
    400 => '客戶端IP 受限',
    401 => '網絡延遲',
    402 => '連接關閉',
    403 => '客戶端來源受限',
    404 => '請求的資源不存在',
    405 => '請求太頻繁',
    406 => '請求超時',
    407 => '找不到遊戲地址',
    500 => '空指針異常',
    501 => '系統異常',
    502 => '系統忙',
    503 => '數據操作異常',
  );

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

	//--------------------非通用函數--------------------

	/**
	 * 註冊新會員
	 * @param $data['user_name'] 會員帳號
	 * @param $data['password'] 會員密碼
   * @param $data['daily_win_limit'] 每日限紅
   * @param $data['win_limit'] 盤口
   * @param $data['currency_id'] 貨幣代碼(非必須)
   * @param &$err 盛裝錯誤(非必須)
	 * @return 盤口(array)
	 */
	public function createMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
      'daily_win_limit' => array('required'=>1,),
      'win_limit' => array('required'=>1,),
      'currency_id' => array('required'=>0,'default'=>self::DG_DEFAULT_CURRENCY_ID),
    );
    //$err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));//無帳號

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }

		$passwordHash = self::_getDgHash($_password);
		$dailyWinLimit = intval(trim($_daily_win_limit));
    $winLimitId = strtoupper(trim($_win_limit));

		$arrMember = array(
			'username' => $_user_name,
			'password' => $passwordHash,
			'currencyName' => $_currency_id,
			'winLimit' => $dailyWinLimit,
		);
		$arrParam = array(
			'data' => $winLimitId,
			'member' => $arrMember
		);

		$agName = $this->cfg_agent;
		$url = "{$this->cfg_base_url}/user/signup/{$agName}/";
		$result = $this->_sendRequest($url,$arrParam);

		if ($result!==false) {
			if ($result && isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)) {  //成功
				if (isset($result['data'])) {
					$actualWinLimitCode = $result['data'];  //回傳實際限紅組
					$actualWinLimit = self::DG_WIN_LIMITS[$actualWinLimitCode];
					return $actualWinLimit;  //回傳限紅的上下限陣列
				} else {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //必需的KEY不存在
          return false;
				}
			} else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
			}
		}
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04'));  //CURL 不成功
		return false;
	}
	/**
	 * 會員登入
   * @param $data['user_name'] 會員帳號
   * @param $data['password'] 會員密碼
   * @param $data['is_mobile'] 手機板?(非必須)
   * @param $data['is_apk'] 用APP進行遊戲?(非必須)
   * @param $data['lang_code'] 語系代碼(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL(string)
	 */
	public function loginMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
      'is_mobile' => array('required'=>0,'default'=>false),
      'is_apk' => array('required'=>0,'default'=>false),
      'lang_code' => array('required'=>0,'default'=>self::DG_DEFAULT_LANG_ID),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }

    $passwordHash = self::_getDgHash($argPassword);
    $arrMember = array(
      'username' => $_user_name,
      'password' => $passwordHash,
    );
    $arrParam = array(
      'lang' => $_lang_code,
      'member' => $arrMember
    );

    $agName = $this->cfg_agent;
    $url = "{$this->cfg_base_url}/user/login/{$agName}/";
    $result = $this->_sendRequest($url,$arrParam);

    if ($result!==false) {
      if (
        $result &&
        isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)&&
        !empty($result['token'])&&
        !empty($result['list'])
        ) {  //成功
        if (isset($result['list'])) {
          $gameToken = $result['token'];
          $gameLinkList = $result['list'];  //0=flash 登入地址, 1=wap登入地址, 2=直接打开APP地址
          if ($argIsMobile) {  //手機版
            if ($argIsApk) {
              if (!empty($gameLinkList[2])) {
                $gameLink = $gameLinkList[2].$gameToken;
              } else {
                $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //陣列缺少key 2
                return false;
              }
            } else {
              if (!empty($gameLinkList[1])) {
                $gameLink = $gameLinkList[1].$gameToken;
              } else {
                $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //陣列缺少KEY 1
                return false;
              }
            }
          } else {  //電腦版
            $gameLink = $gameLinkList[0].$gameToken;
          }
          $this->err = null;
          if (strpos($gameLink,'http://')===false) {  //找不到http
            if (strpos($gameLink,'https://')===false) {  //找不到https
              $gameLink = "https://{$gameLink}";
            }
          } else {  //有找到http://
            //$gameLink = str_replace('http://','https://',$gameLink);
          }
          return $gameLink;  //回傳對應的遊戲連結
        } else {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04'));  //缺少key: list
          return false;
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_05')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_06'));  //CURL 不成功
    return false;
	}

	/**
	 * 取得會員餘額
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額(number)
	 */
	public function getMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $arrDatas[$dk];
          }
        }
      }
    }

    $arrMember = array(
      'username' => $_user_name,
    );
    $arrParam = array(
      'member' => $arrMember
    );

    $agName = $this->cfg_agent;
    $url = "{$this->cfg_base_url}/user/getBalance/{$agName}/";
    $result = $this->_sendRequest($url,$arrParam);

    if ($result!==false) {
      if ($result && isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)) {  //成功
        if (isset($result['member'])) {
          $arrRetMember = $result['member'];
          $retAccount = $arrRetMember['username'];  //用戶名稱
          $retBal = $arrRetMember['balance'];  //用戶餘額

          if ( strtolower($retAccount) == strtolower($_user_name) ) {
            $this->err = null;
            return $retBal;
          } else {
            $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //回傳的username不同於查詢的用戶名稱
            return false;
          }
        } else {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //回傳陣列的鍵未定義: member
          return false;
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_05'));  //CURL 不成功
    return false;
	}

	/**
	 * 下點(提款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 交易號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(array)
   *         array(
                'account' => 會員帳號,
                'amount' => 數額,
                'balance' => 交易後餘額,
                'transid' => 交易號,
              );
	 */
	public function withdrawMemberBalance($arrDatas, &$argErr = null){
    $transType = 'OUT';

    return $this->_transfer(
      $transType,
      $arrDatas,
      $argErr
    );
	}

	/**
	 * 上點(加款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 交易號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(array)
   *         array(
                'account' => 會員帳號,
                'amount' => 數額,
                'balance' => 交易後餘額,
                'transid' => 交易號,
              );
   */
	public function rechargeMemberBalance($arrDatas, &$argErr = null){
    $transType = 'IN';

    return $this->_transfer(
      $transType,
      $arrDatas,
      $argErr
    );
	}

	/**
	 * 抓取注單報表
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
	 */
	public function getGameRecord(&$argErr = null){
    $arrParam = array();

    $agName = $this->cfg_agent;
    $url = "{$this->cfg_base_url}/game/getReport/{$agName}/";
    $result = $this->_sendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)) {  //成功
        if (isset($result['list'])) {
          $arrReports = $result['list'];
          return $arrReports;
        } else {
          //$errCode = -1;
          //$errMsg = '回傳陣列的鍵未定義: list';
          //$argErr = $this->produceError($errCode, $errMsg);
          return array();
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //CURL結果為不成功
    return false;
	}

  /**
   * 抓取注單報表
   * @param $arrBetIds 要標記的注單ID 陣列(array)
   * @param &$err 盛裝錯誤(非必須)
   * @return 執行結果(bool)
   */
  public function markBets(
    $argArrBetIds,
    &$argErr = null
    ) {
    $arrParam = array(
      'list' => $argArrBetIds
    );

    $agName = $this->cfg_agent;
    $url = "{$this->cfg_base_url}/game/markReport/{$agName}/";
    $result = $this->_sendRequestsendRequest($url,$arrParam);
    if ($result!==false) {
      if ($result && isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)) {  //成功
        return true;
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //CURL 結果為不成功
    return false;
  }

	//--------------------非通用函數--------------------

  /* _getDgHash: */
  protected function _getDgHash($argStr) {
    return hash(self::DG_HASH_METHOD, $argStr);
  }

  /* _transfer: 上下點 */
  protected function _transfer(
    $argTransType, //IN=存款, OUT=提款
    $argDatas,
    &$argErr = null
    ) {

    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
      'trans_id' => array('required'=>0,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $argDatas) ) {
        $temp = "_{$dk}";
        $$temp = $argDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $argDatas[$dk];
          }
        }
      }
    }

    if ( array_key_exists('trans_id', $argDatas) ) {
      $transId = $argDatas['trans_id'];
    } else {
      $transId = $this->_getTid($_user_name, $argTransType);
    }

    $transType = strtoupper($argTransType);
    if ($transType == 'IN') {
      $amount = abs($_amount);  //正數存點
    } else {  //OUT
      $amount = abs($_amount);
      $amount = $amount - ($amount*2);  //正數提點
    }

    $arrMember = array(
      'username' => $_user_name,
      'amount' => $amount,
    );
    $arrParam = array(
      'data' => $transId,
      'member' => $arrMember
    );


    $agName = $this->cfg_agent;
    $url = "{$this->cfg_base_url}/account/transfer/{$agName}/";
    $result = $this->_sendRequest($url,$arrParam);

    if ($result !== false) {
      if ($result && isset($result['codeId']) && ($result['codeId']===self::DG_RESPONSE_SUCCESS_CODE)) {  //成功
        $retTid = trim($result['data']);
        if ( $retTid != $transId ) {  //不同
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02'));  //回傳的交易號不同於傳入值
          return false;
        } else {
          if (isset($result['member'])) {
            $arrRetMember = $result['member'];
            $retAccount = $arrRetMember['username'];  //用戶名稱
            $retBal = $arrRetMember['balance'];  //用戶餘額
            if ( strtolower($retAccount) == strtolower($_user_name) ) {
              $this->err = null;
              $arrRet = array(
                'account' => $_user_name,
                'amount' => $amount,
                'balance' => $retBal,
                'transid' => $retTid,
              );
              return $arrRet;  //回傳餘額
            } else {
              $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //回傳的username不同於查詢的用戶名稱
              return false;
            }
          } else {
            $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04'));  //回傳陣列的鍵未定義: member
            return false;
          }
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_05')) . ': ' . $this->_produceError($result['codeId']);  //回傳結果為不成功
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_06'));  //CURL結果為不成功
    return false;
  }

  /* get key for every action */
  protected function _getKey($argAgName=null,$argApiKey=null) {
    if ($argAgName===null) {
      $argAgName = $this->cfg_agent;
    }
    if ($argapi_key===null) {
      $argApiKey = $this->cfg_api_key;
    }
    //$key = hash('md5',"{$argAgName}{$argapi_key}");
    $key = self::_getDgHash("{$argAgName}{$argApiKey}");
    return $key;
  }

  /* produce error */
  protected function _produceError($argErrCode,$argErrMsg=null) {
    if ($this->errMsg) {
      /*return array(
        'errorCode' => $argErrCode,
        'errorMsg' => $argErrMsg,
      );*/
      return "{$argErrMsg} (code {$argErrCode})";
    } else {
      if ( self::DG_API_ERRORS === null) {
        /*return array(
          'errorCode' => -1,
          'errorMsg' => 'DG errors definition is not found',
        );*/
        return 'DG errors definition is not found';
      }
      $arrErrorMsgs = self::DG_API_ERRORS;  //DG.inc.php
      if (array_key_exists($argErrCode,$arrErrorMsgs)) {
        /*return array(
          'errorCode' => $argErrCode,
          'errorMsg' => $arrErrorMsgs[$argErrCode],
        );*/
        return "{$arrErrorMsgs[$argErrCode]} (code {$argErrCode})";
      } else {
        /*return array(
          'errorCode' => $argErrCode,
          'errorMsg' => '錯誤說明未定義, 錯誤代碼: '.$argErrCode,
        );*/
        return '錯誤說明未定義, 錯誤代碼: '.$argErrCode;
      }
    }
  }
  /* send request */
  protected function _sendRequest($argUrl,$argArrData,$argMethod=self::DG_DEFAULT_REQUEST_METHOD) {
    $key = $this->_getKey();
    $arrData = $argArrData;
    $arrData['token'] = $key;
    $method = strtoupper($argMethod);
    $arrCurlDatas = array(
      CURLOPT_CUSTOMREQUEST => $method,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_SSL_VERIFYPEER => false,
      CURLOPT_CONNECTTIMEOUT_MS => self::DG_CURL_CONNECTTIMEOUT_MS,
      CURLOPT_TIMEOUT_MS => self::DG_CURL_TIMEOUT_MS,
      CURLOPT_HTTPHEADER => array(
        'Content-Type: application/json',
      )
    );
    if ( $method == 'GET') {  //GET
      $queryStr = http_build_query($arrData);
      $url = "{$argUrl}?{$queryStr}";
    } else {  //POST
      $url = $argUrl;
      $dataStrInJson = json_encode($arrData);  //can only send 1-d array as postfield data
      $arrCurlDatas[CURLOPT_POSTFIELDS] = $dataStrInJson;
    }

    $ch = curl_init($url);
    foreach ($arrCurlDatas as $cKey => $cVal ) {
      curl_setopt($ch, $cKey, $cVal);
    }
    $result = curl_exec($ch);
    if (curl_errno($ch)) {
      $this->curlError = array(
        'curl_error' => curl_error($ch),
        'curl_errno' => curl_errno($ch),
      );
    } else {
      $this->curlError = null;
    }
    curl_close($ch);

    //Dbgr::preout($url);
    //Dbgr::preout($arrCurlDatas);
    //echo '[[[[[';
    //var_dump($result);
    //echo ']]]]]';
    //Dbgr::preout($curlError);

    if ($result !== false) {
      $resultInAssoc = json_decode($result,true);  //decoded as assoc. array
      $this->responseArr = $resultInAssoc;
      return $resultInAssoc;
    } else {
      //echo "sendRequest::curlError={$curlError} <br/>";
      return false;
    }
  }

  /* get transaction id */
  protected function _getTid($argAccount, $argTransactionType='IN') {
    $transactionType = strtoupper($argTransactionType);
    $tidTime = $this->_getTidTime();
    $rnd = rand(1,999);
    $tid = "DG-{$transactionType}-{$tidTime}{$rnd}-{$argAccount}";
    return $tid;
  }

  /* get formatted time for transaction id */
  protected function _getTidTime() {
    $time = date('YmdHis');
    return $time;
  }

	/*
	 *DG資料傳送
	 *$url =網址
	 *$jsondata是已轉換好的json格式
	 */
	protected function My_post_json($url,$jsonData){
		$options = array(
			CURLOPT_HTTPHEADER => array('Content-Type: application/json'),
			CURLOPT_POSTFIELDS => $jsonData,
		);
		return CurlTool::curl_post($url,null,$options);
	}

	//自動產生轉帳傳票編號
	protected function My_acc_no(){
		$result='acc'.microtime(true);
		return	 $result;
	}

  /*
   * 傳送需要的
   * 生成token的随机字符串"
   */
  protected function My_RandomStr(){
    $L = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $Len = strlen($L);
    $randomString = '';
    for ($i = 0; $i < 10; $i++) {
      $randomString .= $L[rand(0, $Len- 1)];
    }
    return $randomString;
  }
}