<?php
/*
 * Xbs六合彩抓帳
 * 抓帳限制: 
 *     每次長度:
 *     每次間隔:
 *     最遠時間:
 */
class ScriptGameReportXbsAction extends ScriptGameReportAction {

    protected function _initialize() {
        $this->gameCode = 'Xbs';
        $request = $this->getRequest();
        if (isset($request['startTime']) && isset($request['endTime'])) {
            $this->startTime = $request['startTime'];
            $this->endTime = $request['endTime'];
        } else {  //沒給時的預設抓帳起始
            $nowTs = time();
            $this->startTime = date('Y-m-d', strtotime('-2 day'));
            $this->endTime = date('Y-m-d', strtotime('+15 minute'));
        }
        //parent::setTime($this->startTime, $this->endTime);

        // 執行父類初始化
        parent::_initialize();
    }
    
    public function index() {
        if (!$this->power) {exit();}

        //$GameReportData = D("GameReportData");
        //$GameModel = D("Game".$this->gameCode);

        /*if (!method_exists($GameModel,'getGameRecord')) {
            //紀錄錯誤到Db
            $this->assign("status","<span style='color:red;'>".$this->gameCode.'無此代號(Err000)</span>');
            $this->display();
            exit();
        }*/

        $this->getXbsGameReportData($err);

        $this->assign("gameCode",$this->gameCode);//遊戲代號
        $this->assign("timeStr",$this->timeStr);//執行時間區間
        
        $this->assign("detailNumber",count($this->allDetailArray));//更新總注單
        $this->assign("allDetailArray",$this->allDetailArray);
        
        $this->assign("reportNumber",count($this->allReportArray));//更新總統整
        $this->assign("allReportArray",$this->allReportArray);
        
        $this->assign("status","<span style='color:Blue;'>".$this->gameCode.$this->success.'</span>');
        $this->display();
    }

    /*
     * 抓帳
     */
    protected function getXbsGameReportData(&$err='') {
        $this->timeStr .= ((!empty($this->timeStr))? '<BR>' : '').$this->startTime.' ~ '.$this->endTime;
        
        $GameModel = D("Game".$this->gameCode);
        $GameReportData = D("GameReportData");

        $arrRawSums = array();
        $beginDate = date('Y-m-d',strtotime($this->startTime));
        $endDate = date('Y-m-d',strtotime($this->endTime));

        $err = null;
        $arrData = array(
            'begin_date' => $beginDate,
            'end_date' => $endDate,
        );

        $arrRawSums = $GameModel->getBetSumsByDate($arrData, $err);  //API取得XBS的投注總結

        if ((!is_array($arrRawSums))||($arrRawSums === false)) {
            //紀錄錯誤到Db
            $this->assign("status","<span style='color:red;'>".$this->gameCode.'抓帳發生錯誤(Err001) Err=>'.$err.'</span>');
            $this->display();
            exit();
        }
        $numData = sizeof($arrRawSums);

        foreach ($arrRawSums as $sk => $sv) {
            $level = intVal($sv['level']);
            if ($level > 1) {  //屬於非會員的總結
                continue;
            }
            $xbsGameAcc = $sv['account'];  //遊戲帳號
            //把遊戲帳號 加入 搜尋會員帳號陣列 Start
            if (!in_array($xbsGameAcc, $this->allMemberGameAccount)) {
                array_push($this->allMemberGameAccount, $xbsGameAcc);
            }
        }
        //取得 遊戲帳號的平台帳號 Start
        $data = array(
            'gameCode' => $this->gameCode,
            'allMemberGameAccount' => $this->allMemberGameAccount,
        );
        $return = $GameReportData->getMemberDataByGameAccount($data,$err);

/*
        $sql = "
            SELECT
                m.member_id,
                m.agent_id,
                m.member_account,
                m.agent_account,
                LOWER(ga.game_account) as game_name,
                t.agent_tree,
                r.ratio_tree
            FROM common_member m
            JOIN `{$this->tableName}` ga
                ON (ga.member_id=m.member_id)
            JOIN `common_agent_tree` t
                ON (m.`agent_id` = t.`agent_id`)
            JOIN `common_agent_ratio` r
                ON (m.`agent_id` = r.`agent_id`)
            WHERE
                ga.game_account IN ({$valStr})
        ";
*/
        if($return === false){
            //紀錄錯誤到Db
            $this->err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_04')).$err;//抓帳發生錯誤(Err002)
            return false;
        }
        foreach($return as $value){
            $this->memberDataArray[$value['game_name']] = $value;
        }
        //取得 遊戲帳號的平台帳號 End

        foreach ($arrRawSums as $sk => $sv) {
            $level = intVal($sv['level']);
            if ($level > 1) {  //屬於非會員的總結-->略過
                continue;
            }
            $orderDate = strtotime($this->getBetDate($sv['Bet_date']).' 12:00:00');  //帳務日期
            $xbsGameAcc = strtolower($sv['account']);  //遊戲帳號, 要轉成小寫
            $numOfBets = intVal($sv['ccount']);  //注單數
            $report_bettingMoney = floatVal($sv['cmount']);  //注額
            $report_effective = floatVal($sv['bmount']);  //有效注額
            $waterAmount = floatVal($sv['m_rake']);  //退水
            //$winAmount = floatVal($sv[6]);  //中獎
            $report_surplus = floatVal($sv['m_result']);  //輸贏

            $arrMemberData = $this->memberDataArray[$xbsGameAcc];  //取得主帳號資料

            if (!$arrMemberData) {
                //$this->assign(
                //    "status",
                echo "<span style='color:red;'>{$this->gameCode}抓帳發生錯誤(Err003) Err=>遊戲帳號'{$xbsGameAcc}'找不到對應的系統會員帳號</span>";
                //$this->display();
                //exit();
            } else {
/*
        $sql = "SELECT `member_id`,`member_account`,`agent_id`,`agent_account`,`agent_tree`,`ratio_tree`,`detail_gameAccount` as report_gameAccount,`detail_orderDate` as report_orderDate,
                    sum(`detail_bettingMoney`) as report_bettingMoney,sum(`detail_surplus`) as report_surplus,sum(`detail_effective`) as report_effective,count(*) as report_betNumber
                FROM `game_{$gameCode}_detail`
                WHERE (`detail_orderDate` BETWEEN '{$startTime}' AND '{$endTime}')
                GROUP BY `member_id`,`agent_tree`,`ratio_tree`,`detail_orderDate`";
*/
                $data = array(
                    "member_id" => $arrMemberData['member_id'],
                    "member_account" => $arrMemberData['member_account'],
                    "agent_id" => $arrMemberData['agent_id'],
                    "agent_account" => $arrMemberData['agent_account'],
                    "agent_tree" => $arrMemberData['agent_tree'],
                    "ratio_tree" => $arrMemberData['ratio_tree'],
                    "report_gameAccount" => $xbsGameAcc,
                    "report_orderDate" => $orderDate,
                    "report_bettingMoney" => $report_bettingMoney,
                    "report_surplus" => $report_surplus,
                    "report_effective" => $report_effective,
                    "report_betNumber"=> $numOfBets,
                );
                array_push($this->allReportArray, $data);  //塞進去 $this->allReportArray
            }
        }

        //print_r($this->allReportArray);
        
        if(count($this->allReportArray) > 0){
            $data = array(
                'gameCode' => $this->gameCode,
                'allReportArray' => $this->allReportArray
            );
            //$return = $GameReportData->setReportData($data,$err);
            $return = true;
            if($return === false){
                $this->success = '寫入總結失敗';
                //紀錄錯誤到Db
                $this->err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_07')).$err;//抓帳發生錯誤
                //return false;
            } else {
                $this->success = '寫入總結成功';
            }
        } else {
            $this->success = '沒有總結資料';
        }

        $this->allDetailArray = array();  //XBS沒有明細
    }

    //-----------------------------------------------
    //找出一個時間的歸帳日
    public static function getBetDate($argTime) {
        if (date('Y-m-d',strtotime($argTime))==$argTime) {
            return $argTime;
        }
        $splitTimeS = '00:00:00';  //區分不同歸帳日的時間點
        $orderDate = null;
        if (is_int($argTime)&&($argTime >= strtotime('1970-01-01 00:00:00'))) {  //傳入timestamp
            $dateTime = $argTime;
        } else {  //傳入日期時間字串
            $dateTime = strtotime($argTime);
        }
        $splitDatetime = date("Y-m-d {$splitTimeS}", $dateTime);
        $splitTime = strtotime($splitDatetime);

        if ($dateTime >= $splitTime) {  //若已經跨越區分不同歸帳日的時間點-->當日
            $orderDate = date("Y-m-d", $splitTime);
        } else {  //未跨越-->前一日
            $orderDate = date("Y-m-d", $splitTime-60*60*24*1);
        }
        //echo "getBetDate({$argTime})={$orderDate}<br/>";
        return $orderDate;
    }  //--function getBetDate

}