<?php

class GameAsgModel extends ApiModel{
  public $responseArr;
  public $curlError;
  public $err;

  //protected $cfg_base_url = 'https://middleware.oriental-game.com';
  //protected $cfg_report_base_url = 'http://ares.oriental-game.com';
  const AS_RSA_PUBLIC_KEY_PATH = 'Fortune.pub';
  const AS_RSA_PRIVATE_KEY_PATH = 'Fortune.key';
  const AS_RSA_PUBLIC_KEY = '-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAsUVig27vlOwWxRGbCxxO
b0WsRu/L5bKlE3vGcDKPAniR58aXWKY9F4fZH9TdO4QyKYhnWZQcMpjyPREDRuMb
dqxhEjiMrQmJ+TsRW8ryCsvpcEzQV02sLTUPeeyrAWKZeJ1opSMQYjrvNuwAePAe
ZfjemlzsNpXzjH5GO8jnmx9nm+MD66qh72IPdZmm4pgn5naKyn2m3QSENvJplmbU
EFYhHcRtfugPFOHZAZhBjh0Xvqt8FcfDZCAdSvuN3QEIr+BxxuMcHWtuqj4gLc7D
55itJQEGHImqDcaHEFc3+e77ZSNEicKGRWwuq7pZn/ZWrvADiD+rGyhTsaqBG0GK
IW3hmPpciPN8w0SmH3qkOZJ3v2eN849naFJ+FCyef6nUc1X/a4wTFLdstRprKmWG
GwVokFmmDXEu+nUcOsfJHAKUL3jc0DqzxIlwRADh3yF0CLlfrQxQf49MHmckmAdG
cxmj9i+oBcA9NRBBL5DlyyMxo2qiDKfL9L2keoktBQEcjQJNkfO/YX0knvTtRc9c
pnBOqWKjsQ1ty+dtELN1L1zTPU41KKSx8f0Z/g7wGlydcp1E5XwtpPbTYmrkSXiU
naI6SI3GwBCgfekYyGRwxfbMhykgBphXrrt1DTlcwzN+fIo43+EHf2/LZ0nA9W6R
omL71v8X7oM9iypgyRks1I0CAwEAAQ==
-----END PUBLIC KEY-----
';

  CONST AS_RSA_PRIVATE_KEY = '-----BEGIN PRIVATE KEY-----
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
HoHmVnlOFaOFowfwFDHvSHsrrqAJ
-----END PRIVATE KEY-----
';

  const AS_AGENT = 'Fortune';
  const AS_HALLNAME = 'xn';
  const AS_BACKSTAGE_URL = 'http://operation.asdasd55.com:8080';
  const AS_GET_API_URL = 'http://select.asdasd44.com';  //getApiUrl

  const AS_API_HTTP_PROTOCOL = 'http';

  const AS_RESPONSE_SUCCESS_CODE = 0;
  const AS_AES_CIPHER_MODE = 'AES-256-CBC';
  const AS_DEFAULT_REQUEST_METHOD = 'POST';
  const AS_CURL_CONNECTTIMEOUT_MS = 8000;
  const AS_CURL_TIMEOUT_MS = 28000;
  const AS_REPORT_DATETIME_FORMAT = 'Y-m-d H:i:s';
  //const AS_REPORT_DATE_FORMAT = 'Y-m-d';
  const AS_REPORT_TIMEZONE_OFFSET = 8;

  const AS_TRANSFER_DEPOSIT_TYPE_CODE = 0;
  const AS_TRANSFER_WITHDRAW_TYPE_CODE = 1;

  const AS_USER_TYPE_CODE_FORMAL = 1;
  const AS_USER_TYPE_CODE_TEST = 2;

  const AS_REPORT_GAME_TYPE_CODE_ALL = -1;
  const AS_REPORT_MAX_QUERY_LENGTH_HOURS = 6;

  protected $AS_CURL_DATA = array(
    CURLOPT_CUSTOMREQUEST => self::AS_DEFAULT_REQUEST_METHOD,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_SSL_VERIFYHOST => false,
    CURLOPT_SSL_VERIFYPEER => false,
    CURLOPT_CONNECTTIMEOUT_MS => self::AS_CURL_CONNECTTIMEOUT_MS,
    CURLOPT_TIMEOUT_MS => self::AS_CURL_TIMEOUT_MS,
    CURLOPT_POST => true,
  );

  protected $game_url = null;
  protected $game_url_get_datetime = null;

  protected $current_api_url = null;
  protected $current_api_get_datetime = null;

  /* AES参数 */
    private $key = false;
    private $cipher_mode = false;
    private $iv = false;

    /* RSA公钥参数 */
    private $public_key = false;
    private $private_key = false;

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

  //--------------------通用函數--------------------
	/**
	 * 註冊新會員
	 * @param $data['account'] 會員帳號
   * @param $data['hall_name'] 旗下廠商代號
   * @param &$err 盛裝錯誤(非必須)
	 * @return 結果(bool)
	 */
	public function createMember($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }
    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/CreateUser";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;
    // 传输加密资料内容
    $data = array(
      'userAccount' => $account,
      'hallName' => self::AS_HALLNAME,
      'timestamp' => time(),
    );
    $plainText = json_encode($data);
    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);
    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return $result;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === 'Success.'){
        return true;
      } else {
        $err = $result['msg'];
        return false;
      }
    }
	}
	/**
	 * 會員登入
   * @param $data['account'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL(string)
	 */
	public function loginMember($data, &$err = null) {

    $arrKeys = array(
      'account' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }

    if ($this->isGameUrlAvailable()) {
      $err = null;
      return $this->game_url;
    }

    $data = array(
      'userAccount' => $account,
      'hallName' => self::AS_HALLNAME,
      'timestamp' => time(),
    );
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);

    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/UserLoginUrl";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;

    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return $result;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === 'Success.'){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']); //解密
        $resInJson = json_decode($plainText, true); //轉
        $this->setGameUrl($resInJson['userLoginUrl'], date('Y-m-d H:i:s'));
        return self::AS_API_HTTP_PROTOCOL . "://{$resInJson['userLoginUrl']}";
      } else {
        $err = $result['msg'];
        return false;
      }
    }
  }

	/**
	 * 取得會員餘額
   * @param $data['account'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額(number)
	 */
	public function getMemberBalance($data, &$err = null) {

    $arrKeys = array(
      'account' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }
    // 传输加密资料内容
    $data = array(
      'userAccount' => $account,
      'hallName' => self::AS_HALLNAME,
      'timestamp' => time(),
    );
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);
    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/UserBalance";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;
    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );
    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return $result;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === 'Success.'){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']);  
        $resInJson = json_decode($plainText, true);
        return $resInJson['mainBalance'];
      } else {
        $err = $result['msg'];
        return false;
      }
    }
  }
	/**
	 * 下點(提款)
   * @param $data['account'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 訂單號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(bool)
	 */
	public function withdrawMemberBalance($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }
    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/UserWalletTransaction";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;

    $transType = self::AS_TRANSFER_WITHDRAW_TYPE_CODE;
    // 传输加密资料内容
    $data = array(
      'amount' => floatval($amount),
      'hallName' => self::AS_HALLNAME,
      'timestamp' => time(),
      'type' => $transType,
      'userAccount' => $account,
    );
    $plainText = json_encode($data);

    $checksum = hash('crc32', $plainText);

    $data['checksum'] = $checksum;
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);

    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === "Success."){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']);
        $resInJson = json_decode($plainText, true);
        return $resInJson['mainBalance'];
      } else {
        $err = $result['msg'];
        return false;
      }
    }
	}
	/**
	 * 上點(加款)
   * @param $data['account'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 訂單號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(bool)
   */
	public function rechargeMemberBalance($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }
    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/UserWalletTransaction";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;

    $transType = self::AS_TRANSFER_DEPOSIT_TYPE_CODE;
    // 传输加密资料内容
    $data = array(
      'amount' => floatval($amount),
      'hallName' => self::AS_HALLNAME,
      'timestamp' => time(),
      'type' => $transType,
      'userAccount' => $account,
    );
    $plainText = json_encode($data);

    $checksum = hash('crc32', $plainText);

    $data['checksum'] = $checksum;
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);

    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === "Success."){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']);
        $resInJson = json_decode($plainText, true);
        return $resInJson['mainBalance'];
      } else {
        $err = $result['msg'];
        return false;
      }
    }
	}

	/**
	 * 抓取注單報表
   * @param $data['begin_datetime'] 起始日期時間
   * @param $data['end_datetime'] 結束日期時間
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
	 */
	public function getGameRecord($data, &$err = null) {
    $arrKeys = array(
      'startTime' => array('required'=>1,),
      'endTime' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    if (!($apiUrl = $this->getApiUrl($err))) {
      return false;
    }

    $beginTs =strtotime($startTime);
    $endTs =strtotime($endTime);

    $apiUrl = self::AS_API_HTTP_PROTOCOL . "://{$apiUrl}/AsiaStarApi/UserBetRecord";
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;

    // 传输加密资料内容
    $data = array(
      'userAccount' => "",
      'startTime' => $startTime,
      'endTime' => $endTime,
      'hallName' => self::AS_HALLNAME,
      'gameType' => self::AS_REPORT_GAME_TYPE_CODE_ALL,
      'timestamp' => time(),
    );
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);
    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === "Success."){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']);
        $resInJson = json_decode($plainText, true);
        return $resInJson['betRecords'];
      } else {
        $err = $result['msg'];
        return false;
      }
    }

  }
  /**
   * 取得解析過的人類可讀報表明細
   * @param detail_id           注單ID
   * @param member_id           會員ID
   * @param member_account      會員帳號
   * @param agent_id            代理ID
   * @param agent_account       代理帳號
   * @param agent_tree          代理樹
   * @param ratio_tree          佔成樹
   * @param detail_gameAccount  遊戲帳號
   * @param detail_orderDate    帳務日(timestamp)
   * @param detail_bettingMoney 投注額
   * @param detail_surplus      輸贏
   * @param detail_effective    有效投注額
   * @param detail_backWater    退水
   * @param detail_isBackWater  是否已退水
   * @param detail_dataInJson   主注單其餘資料(json格式@varchar)
   * @param detail_subbetInJson 子注單資料(json格式@varchar). 無用.
   *
   * @return 報表明細(array). 回傳2d-array 基本上長得跟傳入差不多，但是多了以下的key
   * + game_name     遊戲名稱
   * + prize         中獎金額
   * + period        期號
   * + sb_html       有格式的子注單. 無用.
   */
  public function getReportRows($argArrRowBetDetails) {

    $arrBets = array();
    if ($argArrRowBetDetails) {
      foreach ($argArrRowBetDetails as $bi => $arrBet) {
        $detail_id = $arrBet['detail_id'];

        $arrBetContents = json_decode($arrBet['detail_dataInJson'], true);
        /*
      'gameName' => $gameName,
      'gameType' => $gameType,
      'hallName' => $hallName,
      'prizeTotal' => $prizeTotal,
      'userType' => $userType,
      'state' => $state,
      'tax' => $tax,
      'period' => $period,
        */
        $gameName = $arrBetContents['gameName'];
        $gameType = $arrBetContents['gameType'];
        $hallName = $arrBetContents['hallName'];
        $prizeTotal = $arrBetContents['prizeTotal'];
        $userType = $arrBetContents['userType'];
        $state = $arrBetContents['state'];
        $tax = $arrBetContents['tax'];
        $period = $arrBetContents['period'];

        $arrBet['game_name'] = $gameName;
        $arrBet['prize'] = $prizeTotal;
        $arrBet['period'] = $period;

        $arrBet['sb_html'] = null;
        $arrBets[] = $arrBet;
      }
      return $arrBets;
    } else {
      return false;
    }
  }


  //--------------------PUBLIC 非通用函數--------------------

  /**
   * get api url.
   * @param none
   * @param &$err 盛裝錯誤(非必須)
   * @return api url(String)
   */
  public function getApiUrl(&$err = null) {
    if ($this->current_api_url) {
      return $this->current_api_url;
    }

    $apiUrl = self::AS_GET_API_URL;
    $apiMethod = self::AS_DEFAULT_REQUEST_METHOD;
    $apiCurlDatas = $this->AS_CURL_DATA;

    // 传输加密资料内容
    $data = array(
        "timestamp" => time(),
    );
    $plainText = json_encode($data);

    $encipheredReqStr = $this->encipherForAsResquest($plainText, $encAuthorization);
    $apiArrData = array(
      'company' => self::AS_AGENT,
      'authorization' => $encAuthorization,
      'data' => $encipheredReqStr,
    );

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === fasle){
      return false;
    } else {
      $result = json_decode($result, true);
      if($result['state'] === 0 && $result['msg'] === 'Success.'){
        $plainText = $this->decipherAsRes($result['data'], $result['authorization']);
        $resInJson = json_decode($plainText, true);
        $this->current_api_url = $resInJson['domain'];
        return $this->current_api_url;
      } else {
        $err = $result['msg'];
        return false;
      }
    }
  }

  protected function encipherForAsResquest($argPlainStr, &$argAuthorization) {

    $aesKey = $this->setAesParam(self::AS_AES_CIPHER_MODE);
    $this->setRsaPublicKey(self::AS_RSA_PUBLIC_KEY);
    $argAuthorization = $this->rsaPublicEncrypt($aesKey); // 取得授权密文
    $encipheredStr = $this->aesEncrypt($argPlainStr); // 取得加密密文
    return $encipheredStr;

  }

  protected function decipherAsRes($argStr, $argAuthorization) {

    // 设定私钥档案位置
    $RSA_PRIVATE_KEY = self::AS_RSA_PRIVATE_KEY;

    // 设定接收密文资料
    //$Data = '密文资料';

    // 设定授权密文
    //$Authorization = '授权密文';

    $this->setRsaPrivateKey($RSA_PRIVATE_KEY);
    $AES_KEY = $this->rsaPrivateDecrypt($argAuthorization);
    $this->setAesParam(self::AS_AES_CIPHER_MODE, $AES_KEY);
    $plainText = $this->aesDecrypt($argStr); // 取得解密文本讯息
    return $plainText;
  }

  public static function getBetDate($argBetDate, &$argSplitTimestamp=null) {
    $betTime = strtotime($argBetDate);
    $splitTime = strtotime(date('Y-m-d',$betTime).' 00:00:00');  //下注當日的12:00:00
    $argSplitTimestamp = $splitTime;
    if ($betTime >= $splitTime) {  //算到隔天的1200
      $targetDate = date('Y-m-d',$betTime);
    } else {  //算成前日
      $targetDate = date('Y-m-d',$betTime-60*60*24);
    }
    return $targetDate;
  }

  public static function getArrayValueByKey($arrArray, $arrKey) {
    if (array_key_exists($arrKey, $arrArray)) {
      return $arrArray[$arrKey];
    } else {
      if (array_key_exists('unknown', $arrArray)) {
        return "{$arrArray['unknown']}({$arrKey})";
      } else {
        'Unknown key';
      }
    }
  }

	//--------------------非通用函數--------------------

  //取得投注項目的文字
  protected function _getBetStr($argGameId, $argBettingContent) {
    $ret = '';
    $gameId = trim($argGameId);
    $arr = explode(',', $argBettingContent);
    if (sizeof($arr)) {
      foreach ($arr as $ak => $arrBetItems) {
        if (strlen(trim($arrBetItems))) {
          $arr2 = explode('^', $arrBetItems);
          if (sizeof($arr2)) {
            $betItemCode = trim($arr2[0]);
            $betAmount = floatVal($arr2[1])+0;
            $winLoss = $arr2[2];
            if (strlen($betItemCode)) {
              if (strlen($ret)) {$ret .= ',';}
              if (array_key_exists($gameId, self::ARR_AS_BET_CODE)) {
                if (array_key_exists($betItemCode, self::ARR_AS_BET_CODE[$gameId])) {
                  $betItem = self::ARR_AS_BET_CODE[$gameId][$betItemCode];
                  if (sizeof($arr)===2) {
                    $ret .= "【{$betItem}】";
                  } else {
                    $ret .= "【{$betItem}】x{$betAmount}";
                  }
                } else {
                  $ret .= "不存在的投注代碼({$betItemCode})";
                }
              } else {
                $ret .= "不存在的遊戲({$gameId})";
              }
            }
          }
        }
      }
      return $ret;
    }
    return false;
  }

  /*
  //遊戲結果尚不可用
  protected function _getGameResultStr($argGameId, $argResult) {
    if (($argGameId==11)||($argGameId==12)) {  //11=百家樂,12=龍虎
      return self::getArrayValueByKey(self::ARR_AS_BACCARAT_RESULT_ID, $argResult);
    } elseif ($argGameId==13) {  //輪盤
      return "【{$argResult}】";
    } elseif ($argGameId==14) {  //骰寶
      $ret = '';
      $len = strlen($argResult);
      for ($i=0; $i<$len; ++$i) {
        if (strlen($ret)) {$ret .= ',';}
        $num = substr($argResult, $i, 1);
        $ret .= "【{$num}】";
      }
      return $ret;
    } elseif ($argGameId==15) {  //德州撲克
      return '德州撲克結果...';
    } elseif ($argGameId==16) {  //翻攤
      return "【{$argResult}】";
    } elseif ($argGameId==17) {  //AG電子
      return 'AG電子結果...';
    }
    return "無法解析結果({$argGameId},{$argResult})";
  }
  */

  /**
   * 檢驗CLASS內的 gameUrl 是否可用
   * @param 不需要
   * @return 結果(bool)
   */
  protected function isGameUrlAvailable() {
    if (
      ($this->game_url === null)
      || ($this->game_url_get_datetime === null)
      || ( (strtotime($this->game_url_get_datetime)+self::AS_GAME_URL_ALIVE_TIME_SEC) >= time() )
    ) {
      return false;
    }
    return true;
  }

  /**
   * 重設CLASS內的 gameUrl 為初始狀態
   * @param 不需要
   * @return 結果(bool)
   */
  protected function _resetGameUrl() {
    if (($this->game_url = null) && ($this->game_url_get_datetime = null)) {
      return true;
    }
    return false;
  }

  /**
   * 設定CLASS內的 gameUrl
   * @param argGameUrl gameUrl本身
   * @param argDatetime 取得gameUrl的時間
   * @return 結果(bool)
   */
  protected function setGameUrl($argGameUrl, $argDatetime) {
    if (($this->game_url = $argGameUrl) && ($this->game_url_get_datetime = $argDatetime)) {
      return true;
    }
    return false;
  }

  /**
     * 设置 AES 加解密的参数
     * @param   string   $cipher_mode   加解密的模式
     * @param   string   $key           加解密的金钥
     * @return  string   回传加解密的钥匙
     */
    public function setAesParam($cipher_mode, $key = null)
    {
        if (!in_array($cipher_mode, openssl_get_cipher_methods())) {
            throw new Exception('AES Param is err!!');
        } else {
            $this->cipher_mode = $cipher_mode;
            $aesKey = $key == null ? $this->randAesKey() : $key;
            $this->key = hash("sha256", $aesKey, true);
            $this->iv = md5($aesKey, true);
        }
        return $aesKey;
    }

    /**
     * 随机从 (a~z A~Z 0~9) 产生32字的字串作为AES的加密金钥
     * @return  string  AES的加密金钥
     */
    public function randAesKey()
    {
        $key_len = 32; // 字串长度
        $key = '';
        $word = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; // 乱数内容
        $len = strlen($word);
        for ($i = 0; $i < $key_len; $i++) {
            $key .= $word[rand() % $len];
        }
        return $key;
    }

     /**
     * AES 字串加密
     * @param   string   $plain_text   要加密的字串
     * @return  string   AES加密后的内容
     */
    public function aesEncrypt($plain_text)
    {
        if (empty($plain_text)) {
            throw new Exception('plain text is empty');
        } else {
            $cipher_text = openssl_encrypt($plain_text, $this->cipher_mode, $this->key, 0, $this->iv);
        }
        return $cipher_text;
    }

    /**
     * AES 字串解密
     * @param   string   $cipher_text   要解密的字串
     * @return  string   AES解密后的内容
     */
    public function aesDecrypt($cipher_text)
    {
        if (empty($cipher_text)) {
            throw new Exception('cipher text is empty');
        } else {
            $plain_text = openssl_decrypt($cipher_text, $this->cipher_mode, $this->key, 0, $this->iv);
        }
        return $plain_text;
    }

    /**
     * 设定RSA公钥
     * @param    string   $public_key   公钥文件内容
     * @return   bool     是否成功
     */
    public function setRsaPublicKey($public_key)
    {
        $this->public_key = openssl_get_publickey($public_key);
        if (!$this->public_key) {
            throw new Exception('public key Invalid!!');
        }
        return true;
    }

    /**
     * 设定RSA私钥
     * @param    string   $private_key   私钥文件内容
     * @return   bool     是否成功
     */
    public function setRsaPrivateKey($private_key)
    {
        $this->private_key = openssl_get_privatekey($private_key);
        if (!$this->private_key) {
            throw new Exception('private key Invalid!!');
        }
        return true;
    }

    /**
     * RSA公钥加密函数(需定义公钥)
     * @param    string   $plain_text   要加密的内容
     * @return   string   加密后的字串
     */
    public function rsaPublicEncrypt($plain_text)
    {
        if (!$this->public_key || $plain_text === '') {
            throw new Exception('public Key or plain text invalid');
        }
        openssl_public_encrypt($plain_text, $crypt_text, $this->public_key);
        openssl_free_key($this->public_key);
        return base64_encode($crypt_text); // 加密后的内容为 binary 透过 base64_encode() 转换为 string 方便传输
    }


    /**
     * RSA私钥解密函数(需定义私钥)
     * @param    string   $cipher_text   要解密的字串
     * @return   string   解密后的内容
     */
    public function rsaPrivateDecrypt($cipher_text)
    {
        if (!$this->private_key || $cipher_text === '') {
            throw new Exception('private Key or encrypted text invalid');
        }
        // 先将密文用 base64_decode() 解译
        openssl_private_decrypt(base64_decode($cipher_text), $decrypted, $this->private_key);
        openssl_free_key($this->private_key);
        return $decrypted;
    }

}