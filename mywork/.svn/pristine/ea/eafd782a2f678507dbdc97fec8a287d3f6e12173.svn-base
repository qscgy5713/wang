<?php
/**
 * 託售總計
 */
class  WithdrawTotalAction extends AdminAction
{
	protected $WithdrawTotal = 10; //分頁筆數
	protected $pageMoreNumber = 5; //一頁最多幾筆
	//TODO: 首頁
	public function index()
	{
		//使用 common.php filterStr($data) 公用函數 過濾取得輸入的資料
    $request = $this->getRequest();

    //分頁製作
    if(empty($request['pageNumber'])){
        $pageNumber = 1;
    } else {
        $pageNumber = $request['pageNumber'];
    }

    $today = date('Y-m-d');
    $startTime = $today.' 00:00:00';
    $endTime = $today.' 23:59:59';

    if(isset($request['startTime'])){
        $startTime = $request['startTime'];
    }
    if(isset($request['endTime'])){
        $endTime = $request['endTime'];
    }


    if(date('D') === 'Mon') {
        $tsThisWeek = strtotime('today');
    } else {
        $tsThisWeek = strtotime('last monday');
    }
    $tsYesterday = strtotime('yesterday');
    $tsLastMonth = strtotime('last month')-((60*60*24*(date('d')-1)));
    $tsThisMonth = strtotime('this month')-((60*60*24*(date('d')-1)));
    $lastWeekA = date('Y-m-d',$tsThisWeek-(60*60*24*7));
    $lastWeekB = date('Y-m-d',$tsThisWeek-(60*60*24*1));
    $thisWeekA = date('Y-m-d',$tsThisWeek+(60*60*24*0));
    $thisWeekB = date('Y-m-d',$tsThisWeek+(60*60*24*6));
    $yesterday = date('Y-m-d',$tsYesterday);
    $lastMonthA = date('Y-m-d',$tsLastMonth);
    $lastMonthB = date('Y-m-d',$tsLastMonth+(60*60*24*(cal_days_in_month(CAL_GREGORIAN,date("m",strtotime($lastMonthA)),date("Y", strtotime($lastMonthA)))-1)));
    $thisMonthA = date('Y-m-d',$tsThisMonth);
    $thisMonthB = date('Y-m-d',$tsThisMonth+(60*60*24*(cal_days_in_month(CAL_GREGORIAN,date("m"),date("Y"))-1)));
    $this->assign("startTime",$startTime);//查詢開始時間
    $this->assign("endTime",$endTime);//查詢最後時間
    $this->assign("today",$today);//今日
    $this->assign("yesterday",$yesterday);//昨日
    $this->assign("thisWeekA",$thisWeekA);//本週第一天
    $this->assign("thisWeekB",$thisWeekB);//本週最後一天
    $this->assign("lastWeekA",$lastWeekA);//上週第一天
    $this->assign("lastWeekB",$lastWeekB);//上週最後一天
    $this->assign("thisMonthA",$thisMonthA);//本月第一天
    $this->assign("thisMonthB",$thisMonthB);//本月最後一天
    $this->assign("lastMonthA",$lastMonthA);//上月第一天
    $this->assign("lastMonthB",$lastMonthB);//上月最後一天
    //上月最後一天

   	$memberTotalMoney = 0;//總金額
    $memberTotalNumber = 0;//總筆數
    $memberTotalWithdrawMoney = 0;//總託售
    $CashflowWithdraw = D('CashflowWithdraw');
    $data = array(
    	"member_account" => $request['memberAccount'],
        "startTime" => strtotime($startTime),
        "endTime" => strtotime($endTime)
    );
    $total = $CashflowWithdraw->getWithdrawDataby($data);
    if($total === false){
        $this->error(L(strtoupper("ERROR_" . __CLASS__ . '_' . __FUNCTION__ . '_01')));
    }
    // var_dump($total);die;
    $memberTotalMoney -= (int)$total['sumMoney'];
    $memberTotalWithdrawMoney -= (int)$total['sumMoney'];
    $memberTotalNumber += (int)$total['sumNumber'];

    $CashflowWithdraw = D('CashflowWithdraw');

    $return = $CashflowWithdraw->getWithdrawDataPageByAccountNumber($data);
    $totalNumber = $return['totalNumber']; //總筆數
    $totalPage = ceil($totalNumber / $this->WithdrawTotal); //分頁筆數
    $pageArray = getPageArray($pageNumber, $totalPage, $this->pageMoreNumber); //分頁陣列

    $data = array(
    	"member_account" => $request['memberAccount'],
        "startTime" => strtotime($startTime),
        "endTime" => strtotime($endTime),
        'page' => array(
            'number' => $this->WithdrawTotal,
            'pageNumber' => $pageNumber,
        ),
    );
    $return = $CashflowWithdraw->getWithdrawDataPageByAccount($data);
    if($return === false){
        $this->error(L(strtoupper("ERROR_" . __CLASS__ . '_' . __FUNCTION__ . '_02')));
    }
    $showStr = "";
    $FiedlChange = array(
    	'withdraw_id' => 'withdrawId',
      'member_id' => 'membeId',
      'member_account' => 'memberAccount',
      'agent_account' => 'agentAccount',
      'agent_tree' => 'agentRree',
      'withdraw_createTime' => 'withdrawCreateTime',
      'withdraw_money' => 'withdrawMoney',
      'withdraw_handlingFee' => 'withdrawhandlingFee',
      'withdraw_memberIp' => 'withdrawMemberIp',
      'admin_id' => 'adminId',
      'admin_account' => 'adminAccount',
      'withdraw_adminIp' => 'withdrawAdminIp',
      'withdraw_modifyTime' => 'withdrawModifyTime',
    );
    $showArray = array();
    if($return[0]['withdraw_id']){
	    foreach ($return as $key => $value) {
	    	foreach ($FiedlChange as $key1 => $value1) {
	    		switch ($key1) {
	    			case 'withdraw_createTime': //轉換時間
	    				$showStr = date('m-d H:i:s', $value[$key1]);
	    				break;
	    			case 'withdraw_modifyTime': //轉換時間
	    				$showStr = date('m-d H:i:s', $value[$key1]);
	    				if(empty($value[$key1])){
	    					$showStr = "無修改時間";
	    					break;
	    				}
	    				break;
	    			case 'withdraw_memberIp': //IP轉換
	    				$showStr = get_ip_inet_ntop($value[$key1]);
	    				break;
	    			case 'withdraw_adminIp': //IP轉換
	    				$showStr = get_ip_inet_ntop($value[$key1]);
	    				break;
                    case 'withdraw_money':
                        $showStr = (int)$value[$key1] * (-1);
                        break;
	    			default:
	    				$showStr = $value[$key1];
	    				break;
	    		}
	    		$showArray[$key][$value1] = $showStr;
	    	}
	    }
    }
    // var_dump($showArray);die;
    $this->assign("memberEmpty","<tr><td colspan='7' align='center'>無明細資料</td></tr>");
    $this->assign("showArray",$showArray);
    $this->assign("memberAccount",$request['memberAccount']);//總金額
    $this->assign("memberTotalMoney",$memberTotalMoney);//總金額
    $this->assign("memberTotalNumber",$memberTotalNumber);//總筆數
    $this->assign("memberTotalWithdrawMoney",$memberTotalWithdrawMoney);//總託售
    $this->assign("pageNumber",$pageNumber);//頁數
    $this->assign("totalPage",$totalPage);//總頁數
    $this->assign("pageArray",$pageArray);//分頁陣列
		$this->display();
	}
	//TODO: 搜索帳號
	public function searchMemberName() {
        // 判斷有無輸入
        $request = $this->getRequest();
        if (empty($request["query"])) {
            $this->error(L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01')));
        }

        $CommonMember = D("CommonMember");
        $limit = 7;
        $data = array(
            "member_acount" => $request["query"],
            "agent_id" => $_SESSION["Agent"]["id"],
            "limit"=> 7
        );
        $member_child_arr = $CommonMember->searchMemberByMemberAccount($data);
        if ($member_child_arr === false) {
            $this->error(L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')));
        }
        foreach ($member_child_arr as $member_child) {
            $can_send_name[] = $member_child["member_account"];
        }
        echo json_encode($can_send_name);
    }
}