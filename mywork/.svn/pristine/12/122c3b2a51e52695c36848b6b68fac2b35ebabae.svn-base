<?php

class GameBjModel {
  public $responseArr;
  public $curlError;
  public $err;

  protected $cfg_base_url = 'https://ag.ck888.net/api';
  protected $cfg_game_url = 'http://jeff.ck888.net';
  protected $cfg_api_key = '9d1805bd7fd56d5f';
  protected $cfg_check_iv = '97a80e526640673a';

  const BJ_DEFAULT_REQUEST_METHOD = 'GET';
  const BJ_CURL_CONNECTTIMEOUT_MS = 8000;
  const BJ_CURL_TIMEOUT_MS = 18000;
  const BJ_TRANS_DEPOSIT_SIGN = 'IN';
  const BJ_TRANS_WITHDRAW_SIGN = 'OUT';

  const BJ_API_ERRORS = array(
    //errorid => 中文錯誤
    100 => '格式錯誤',
    126 => '傳送資料缺少驗證金鑰',
    127 => '找不到代理 (0x0001)',
    128 => '找不到代理 (0x0002)',
    200 => '帳號名稱已存在',
    201 => '無法建立會員',
    202 => '會員不存在',
    203 => '訂單序號重複',
    204 => '訂單序號不存在',
    205 => '會員停權',
    206 => '點數不足',
  );

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

	//--------------------非通用函數--------------------

	/**
	 * 註冊新會員
	 * @param $data['user_name'] 會員帳號
   * @param $data['password'] 會員密碼
   * @param &$err 盛裝錯誤(非必須)
	 * @return 結果 (bool)
	 */
	public function createMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'password' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $arrData = array(
      'method' => 'CreateUser',
      'key' => $this->_getApiKey(),
      'time' => $this->_getTime(),
      'name' => trim($_user_name),
      'pass' => $_password,
    );

    $url = $this->cfg_base_url;
    $result = $this->_sendRequest($url,$arrData);

    if ($result!==false) {
      if ($result && (!isset($result['errorid'])) && (!isset($result['errormsg']))) {  //成功
        return true;
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($result['errorid']);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
	}

	/**
	 * 會員登入
   * @param $data['user_name'] 會員帳號
   * @param $data['token'] 登入用的 token (非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL (string)
	 */
	public function loginMember($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'token' => array('required'=>0,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    if ((!isset($_token)) || (!strlen($_token))) {
      $token = $this->getLoginToken(array(
        'user_name' => $_user_name,
      ),$argErr);
      if ($token !== false) {
        $gameLink = $this->cfg_game_url . "/login?token={$token}";
        return $gameLink;
      } else {
        return false;
      }
    } else {
      $gameLink = $this->cfg_game_url . "/login?token={$_token}";
      return $gameLink;
    }
	}

  /**
   * 取得登入用token
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return token (string)
   */
  public function getLoginToken($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $arrData = array(
      'method' => 'LoginUser',
      'key' => $this->_getApiKey(),
      'time' => $this->_getTime(),
      'name' => trim($_user_name),
    );

    $url = $this->cfg_base_url;
    $result = $this->_sendRequest($url,$arrData);
    if ($result!==false) {
      if (
        $result &&
        (isset($result['token'])) &&
        (strlen($result['token'])) &&
        (!isset($result['errorid'])) &&
        (!isset($result['errormsg']))
        ) {  //成功
          return $result['token'];
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($result['errorid']);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
  }

  /**
   * 取得會員資訊
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 會員資訊 (array)
   */
  public function getMemberInfo($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $arrData = array(
      'method' => 'UserIsOnline',
      'key' => $this->_getApiKey(),
      'time' => $this->_getTime(),
      'name' => trim($_user_name),
    );

    $url = $this->cfg_base_url;
    $result = $this->_sendRequest($url,$arrData);
    if ($result!==false) {
      if ($result && (!isset($result['errorid'])) && (!isset($result['errormsg']))) {  //成功
        if ( ($argKey !== null) && array_key_exists($argKey, $result) ) {
          return $result[$argKey];
        } else {
          return $result;
        }
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($result['errorid']);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
  }

	/**
	 * 取得會員餘額
   * @param $data['user_name'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額 (number)
	 */
	public function getMemberBalance($arrDatas, &$argErr = null){
    $arrMemInfo = $this->getMemberInfo($arrDatas, $argErr);
    return $arrMemInfo['point'];
	}

	/**
	 * 下點(提款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param &$err 盛裝錯誤(非必須)
   * @return 交易後餘額 (number)
	 */
	public function withdrawMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $transType = self::BJ_TRANS_WITHDRAW_SIGN;
    $amount = abs($_amount);
    $transId = $this->_getTid($_user_name, $transType);
    return $this->_transfer($transType, $_user_name, $amount, $transId, $argErr);
	}

	/**
	 * 上點(加款)
   * @param $data['user_name'] 會員帳號
   * @param $data['amount'] 數額
   * @param &$err 盛裝錯誤(非必須)
   * @return 交易後餘額 (number)
   */
	public function rechargeMemberBalance($arrDatas, &$argErr = null){
    $arrKeys = array(
      'user_name' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $transType = self::BJ_TRANS_DEPOSIT_SIGN;
    $amount = abs($_amount);
    $transId = $this->_getTid($_user_name, $transType);
    return $this->_transfer($transType, $_user_name, $amount, $transId, $argErr);
	}

	/**
	 * 抓取注單報表
   * @param $data['begin_datetime'] 起始日期時間
   * @param $data['end_datetime'] 結束日期時間
   * @param $data['offset'] 位移 (非必須)
   * @param $data['user_name'] 特定會員名稱 (非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
   *
   * [GetAllBetDetailsForTimeIntervalDV]
   * This web service will fetch bet details of lobby for a time interval maximum 24 hours. The
   * frequency of the call should be made to this API 5 times per 5 minutes otherwise it will
   * throw an error.
	 */
	public function getGameRecord($arrDatas, &$argErr = null, &$argHasMore = false){
    $arrKeys = array(
      'begin_datetime' => array('required'=>1,),
      'end_datetime' => array('required'=>1,),
      'offset' => array('required'=>0,'default'=>0),
      'user_name' => array('required'=>0,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $arrDatas) ) {
        $temp = "_{$dk}";
        $$temp = $arrDatas[$dk];
      } else {
        if ($isKeyRequired) {
          $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $offset = intVal($_offset);
    //$beginDatetime = str_replace(' ', '%20', trim($argBeginDatetime));
    //$endDatetime = str_replace(' ', '%20', trim($argEndDatetime));
    $beginDatetime = trim($_begin_datetime);
    $endDatetime = trim($_end_datetime);
    $arrData = array(
      'method' => 'UserGameLog',
      'key' => self::_getApiKey(),
      'time' => self::_getTime(),
      'fromtime' => $beginDatetime,
      'totime' => $endDatetime,
      'offset' => $offset,
    );

    if (isset($_user_name) && strlen($_user_name)) {
      $arrData['name'] = trim($_user_name);
    }

    $url = $this->cfg_base_url;
    $result = $this->_sendRequest($url,$arrData);
    //Dbgr::preout($arrData);
    if ($result!==false) {
      //Dbgr::preout($result);
      if ($result && (isset($result['gamelog'])) && (!isset($result['errorid'])) && (!isset($result['errormsg']))) {  //成功
        //$argOffset = $result['offset'];
        $argHasMore = $result['more'];
        return $result['gamelog'];
      } else {  //失敗
        $errCode = $result['errorid'];
        $errMsg = $result['errormsg'];
        $argErr = $this->_produceError($errCode);
      }
    }
    return false;
	}

  /**
   * 取得解析過的人類可讀報表明細
   * @param detail_id           注單ID
   * @param member_id           會員ID
   * @param member_account      會員帳號
   * @param agent_id            代理ID
   * @param agent_account       代理帳號
   * @param agent_tree          代理樹
   * @param ratio_tree          佔成樹
   * @param detail_gameAccount  遊戲帳號
   * @param detail_orderDate    帳務日(timestamp)
   * @param detail_bettingMoney 投注額
   * @param detail_surplus      輸贏
   * @param detail_effective    有效投注額
   * @param detail_backWater    退水
   * @param detail_isBackWater  是否已退水
   * @param detail_dataInJson   主注單其餘資料(json格式@varchar)
   * @param detail_subbetInJson 子注單資料(json格式@varchar). 無用.
   *
   * @return 報表明細(array). 回傳2d-array 基本上長得跟傳入差不多，但是多了以下的key
   * + no                期號
   * + game_name         遊戲名稱
   * + mode              玩法
   * + bet_numbers       投注號碼
   * + odds              賠率字串
   * + is_checkout       結算情形
   * + bet_datetime      投注時間(GMT+8)
   * + sb_html           有格式的子注單. 無用.
   */
  public function getReportRows($argArrRowBetDetails) {

    $arrBets = array();
    if ($argArrRowBetDetails) {
      foreach ($argArrRowBetDetails as $bi => $bet) {
        $detail_id = $bet['detail_id'];
        $arrBetContents = json_decode($bet['detail_dataInJson'], true);
        $no = $arrBetContents['no'];
        $time = $arrBetContents['time'];
        $game = $arrBetContents['game'];
        $mode = $arrBetContents['mode'];
        $bet_numbers = $arrBetContents['number'];
        $odds = $arrBetContents['odds'];
        $count = $arrBetContents['count'];
        $win = $arrBetContents['win'];
        $bonus = $arrBetContents['bonus'];
        $checkout = $arrBetContents['checkout'];

        $bet['game_name'] = self::_getGameNameById($game,1);  //0=正常名稱, 1=短名稱
        $bet['bet_numbers'] = str_replace( '|', '', self::_getBetNumbersByStr($mode, $bet_numbers) );
        $modeStr = self::_getModeStrById($mode);
        if (mb_strlen($modeStr) > 4) {
          $len = mb_strlen($modeStr);
          $lenP1 = intVal($len/2);
          $lenP2 = $len - $lenP1;
          $modeStr = mb_substr($modeStr, 0, $lenP1) . '<br/>' . mb_substr($modeStr, $lenP1, $lenP2);
        }
        if (mb_strlen($bet_id) > 10) {
          $len = mb_strlen($bet_id);
          $lenP1 = intVal($len/2)-2;
          $lenP2 = $len - $lenP1;
          $bet_id = '<span title="'.$bet_id.'">'.
            '<span style="font-weight:bold;">' . mb_substr($bet_id, 0, 2) . '</span>' .
            mb_substr($bet_id, 2, $lenP1) . '<br/>' .
            mb_substr($bet_id, $lenP1+2, $lenP2) .
            '</span>';
        }
        $bet['no'] = $no;
        $bet['mode'] = $modeStr;
        $bet['odds'] = self::_getOddsByStr($mode, $bet['odds']);
        //$bet['bet_id'] = $bet_id;
        //$is_checkout = ($bet['is_checkout'] == true);
        $is_checkout = $bet['is_checkout'];
        if ($is_checkout == 0) {
          $bet['is_checkout'] = '<i class="fa fa-2x fa-clock-o color-blue"></i>';
        } elseif ($is_checkout == 1) {
          $bet['is_checkout'] = '<i class="fa fa-2x fa-check color-green"></i>';
        } elseif ($is_checkout == 2) {  //註銷
          $bet['is_checkout'] = '<i class="fa fa-2x fa-times color-gray"></i>';
        }
        //$arrTime = explode(' ', $bet['bet_datetime']);
        $bet['bet_datetime'] = $time;
        $bet['sb_html'] = null;
        $arrBets[] = $bet;
      }
      return $arrBets;
    } else {
      return false;
    }
  }

	//--------------------非通用函數--------------------

  /* transfer: 上下點 */
  protected function _transfer(
    $argTransType, //IN=存款, OUT=提款
    $argUserName,  //會員帳號
    $argAmount,  //額度
    $argTransId,  //交易號
    &$argErr = null
    ) {
    $userName = trim($argUserName);
    $amount = intVal($argAmount);
    if ( $argTransType === self::BJ_TRANS_DEPOSIT_SIGN) {
      $amount = abs($amount);
    } else {
      $amount = (-1) * abs($amount);
    }
    $arrData = array(
      'method' => 'UserDivertPoint',
      'key' => $this->_getApiKey(),
      'time' => $this->_getTime(),
      'name' => $userName,
      'orderid' => trim($argTransId),
      'divert' => $amount,
      //'clear' => 1,  //optional. when 1 empty out the member's balance
    );

    $url = $this->cfg_base_url;
    $result = $this->_sendRequest($url,$arrData);
    if ($result!==false) {
      if ($result && (!isset($result['errorid'])) && (!isset($result['errormsg']))) {  //成功
        return $result['point'];
      } else {  //失敗
        $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_02')).": ".$this->_produceError($result['errorid']);
        return false;
      }
    }
    $argErr = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_03'));  //CURL 結果為不成功
    return false;
  }

  /* produce error */
  protected function _produceError($argErrCode,$argErrMsg=null) {
    if ($argErrMsg) {
      return "{$argErrMsg} (code {$argErrCode})";
    } else {
      if (array_key_exists($argErrCode,self::BJ_API_ERRORS)) {
        $errorMsg = self::BJ_API_ERRORS[$argErrCode];
        return "{$errorMsg} (code {$argErrCode})";
      } else {
        $errorMsg = '錯誤說明未定義';
        return "{$errorMsg} (code {$argErrCode})";
      }
    }
  }

  /* 傳回目前 iv */
  protected function _getCheckIv() {
    return $this->cfg_check_iv;
  }

  /* 傳回目前apiKey */
  protected function _getApiKey() {
    return $this->cfg_api_key;
  }

  /* get transaction id */
  protected function _getTid($argAccount, $argTransactionType='IN') {
    $transactionType = strtoupper($argTransactionType);
    $tidTime = $this->_getTidTime();
    $rnd = rand(1,9999);
    $tid = "BJ-{$tidTime}-{$rnd}";
    return $tid;
  }

  /* get formatted time for transaction id */
  protected function _getTidTime() {
    $time = date('ymdHis');
    return $time;
  }

  /* get formatted time for each action */
  protected function _getTime() {
    $time = date('YmdHis');
    return $time;
  }

  /* get check for eavery action */
  protected function _getCheck($argData) {
    if (is_array($argData)) {
      //$str = http_build_query($argData);
      $str = '';
      foreach ($argData as $aKey => $aVal) {
        if (strlen($str)) {$str .= '&';}
        $str .= "{$aKey}={$aVal}";
      }
    } else {
      $str = $argData;
    }
    $iv = $this->_getCheckIv();
    $str = "{$iv}{$str}";
    $check = hash('md5', $str);
    return $check;
  }

  /* send http request via curl and return its response in assoc array */
  protected function _sendRequest($argUrl,$argArrData,$argMethod=self::BJ_DEFAULT_REQUEST_METHOD) {
    $arrData = $argArrData;
    ksort($arrData);
    $check = $this->_getCheck($arrData);
    $arrData['check'] = $check;
    //var_dump($arrData);
    $method = strtoupper($argMethod);
    $arrCurlDatas = array(
      CURLOPT_CUSTOMREQUEST => $method,
      //CURLOPT_POSTFIELDS => $argArrData,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_SSL_VERIFYPEER => false,
      CURLOPT_CONNECTTIMEOUT_MS => self::BJ_CURL_CONNECTTIMEOUT_MS,
      CURLOPT_TIMEOUT_MS => self::BJ_CURL_TIMEOUT_MS,
      //CURLOPT_HTTPHEADER => array('Content-Type: application/json',)
    );
    if ( $method == 'GET') {  //GET
      //$queryStr = http_build_query($arrData); //dont use this shit
      $queryStr = '';
      foreach ($arrData as $key => $val) {
        if (strlen($queryStr)) {$queryStr .= '&';}
        //$val = urlencode($val);
        $val = ($val);
        $queryStr .= "{$key}={$val}";
      }
      $url = "{$argUrl}?{$queryStr}";
    } else {  //POST
      $url = $argUrl;
      $arrCurlDatas[CURLOPT_POSTFIELDS] = $arrData;
    }

    //var_dump($url);
    //var_dump($arrCurlDatas);

    $ch = curl_init($url);
    foreach ($arrCurlDatas as $cKey => $cVal ) {
      curl_setopt($ch, $cKey, $cVal);
    }
    //curl_setopt_array($ch,$arrCurlDatas);
    $result = curl_exec($ch);
    //Dbgr::preout($result);
    if (curl_errno($ch)) {
      $this->curlError = array(
        'curl_error' => curl_error($ch),
        'curl_errno' => curl_errno($ch),
      );
    } else {
      $this->curlError = null;
    }
    curl_close($ch);

    //echo "\$result={$result} <br/>";
    //Dbgr::preout($result);

    if ($result !== false) {
      $resultInAssoc = json_decode($result,true);  //decoded as assoc. array
      $this->responseArr = $resultInAssoc;
      return $resultInAssoc;
    } else {
      //echo "sendRequest::curlError={$curlError} <br/>";
      return false;
    }
  }


  protected function getTwoFaceStrById($argId, $argMode) {
    $arrModes = array(
      0 => array('大', '單'),
      1 => array('小', '雙'),
    );
    $id = intVal(trim($argId));
    if (array_key_exists($id, $arrModes)) {
      if ($argMode='bigsmall') {
        return $arrModes[$id][0];
      } else {
        return $arrModes[$id][1];
      }
    } else {
      return "未定義的雙面id ({$id})";
    }
  }

  protected function _getGameNameById($argGameId,$argNameIndex=0) {
    $arrGames = array(
      1 => array('北京賽車','北京'),
      3 => array('極速賽車','極速'),
    );
    $id = intVal(trim($argGameId));
    if (array_key_exists($id, $arrGames)) {
      return $arrGames[$id][$argNameIndex];
    } else {
      return "未定義的遊戲id ({$argGameId})";
    }
  }

  function getTwoFaceStrByStr($argStr, $argMode) {
    $str = '';
    if ($argMode=='bigsmall') {
      if ($argStr == '1') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-big inline\">大</div>";
      } elseif ($argStr == '0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-small inline\">小</div>";
      } elseif (($argStr == '0,1') || ($argStr == '1,0')) {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-big-plus-small inline\">大+小</div>";
      } elseif ($argStr == '0,0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-none inline\">無</div>";
      }
    } elseif ($argMode=='oddeven') {
      if ($argStr == '1') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-odd inline\">單</div>";
      } elseif ($argStr == '0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-even inline\">雙</div>";
      } elseif (($argStr == '0,1') || ($argStr == '1,0')) {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-odd-plus-even inline\">大+小</div>";
      } elseif ($argStr == '0,0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-none inline\">無</div>";
      }
    } else {  //tiger-dragon
      if ($argStr == '1') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-dragon inline\">龍</div>";
      } elseif ($argStr == '0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-tiger inline\">虎</div>";
      } elseif (($argStr == '0,1') || ($argStr == '1,0')) {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-dragon-plus-tiger inline\">龍+虎</div>";
      } elseif ($argStr == '0,0') {
        $str = "<div class=\"bj-bet-num mode-two-face two-face-none inline\">無</div>";
      }
    }
    return $str;
  }

  protected function _getModeStrById($argModeId) {
    $arrModes = array(
      0 => 'mod_id 0',
      1 => '猜名次',
      2 => '猜冠亞軍',
      3 => '猜前三名',
      4 => '猜前四名(未開放)',
      5 => '猜前五名(未開放)',
      6 => '大小單雙',
      7 => '冠亞和大小單雙',
      8 => '冠亞和指定數(未開放)',
      9 => '龍虎',
    );
    $mode = intVal(trim($argModeId));
    if (array_key_exists($mode, $arrModes)) {
      return $arrModes[$mode];
    } else {
      return "未定義的mode_id ({$mode})";
    }
  }

  protected function _getOddsByStr($argModeId, $argOddStr) {
    $arrOdds = explode(',', $argOddStr);
    $arrOddCounts = array_count_values($arrOdds);
    $mode = intVal(trim($argModeId));
    $str = '';

    if ($mode==0) {

    } elseif ($mode==1) { //猜名次, 9.7
      $str = "{$argOddStr}";
    } elseif ($mode==2) {  //猜冠亞軍, 87.2
      $str = "{$argOddStr}";
    } elseif ($mode==3) {  //猜前三名, 655.2
      $str = "{$argOddStr}";
    } elseif ($mode==4) {  //猜前四名(未開放
    } elseif ($mode==5) {  //猜前五名(未開放
    } elseif ($mode==6) {  //大小單雙, 1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97
      $max = 0;
      $maxTitle = null;
      $arr = array('冠軍大','冠軍小','冠軍單','冠軍雙','亞軍大','亞軍小','亞軍單','亞軍雙','季軍大','季軍小','季軍單','季軍雙');
      //找出最多賠率出現次數
      foreach ($arrOddCounts as $cKey => $count) {
        if ($count > $max) {
          $max = $count;  //最多出現次數
          $maxTitle = $cKey;  //出現最多的賠率
        }
      }
      if ($max == sizeof($arr)) {  //各玩法均為該賠率
        $str = "均為 {$maxTitle}";
      } else {
        $str2 = '';
        //找出不同於最多次數的賠率並詳列玩法名稱及賠率
        if ($max == 1) {  //全部玩法賠率都不同
          foreach ($arrOdds as $oKey => $odd) {
            if (strlen($str2)) {$str2 .= ', ';}
            $str2 .= "{$arr[$oKey]}: {$odd}";
          }
        } else {  //有些玩法賠率相同
          foreach ($arrOdds as $oKey => $odd) {
            if ($odd != $maxTitle) {
              if (strlen($str2)) {$str2 .= ', ';}
              $str2 .= "{$arr[$oKey]}: {$odd}";
            }
          }
          if (strlen($str2)) {$str2 .= ', ';}
          $str2 .= "其餘為: {$maxTitle}";
        }
      }
    } elseif ($mode==7) {  //冠亞和大小單雙, 1.97,1.97,1.97,1.97
      $max = 0;
      $maxTitle = null;
      $arr = array(0=>'和大',1=>'和小',2=>'和單',3=>'和雙');
      //找出最多賠率出現次數
      foreach ($arrOddCounts as $cKey => $count) {
        if ($count > $max) {
          $max = $count;  //最多出現次數
          $maxTitle = $cKey;  //出現最多的賠率
        }
      }
      if ($max == sizeof($arr)) {  //各玩法均為該賠率
        $str = "均為 {$maxTitle}";
      } else {
        $str2 = '';
        //找出不同於最多次數的賠率並詳列玩法名稱及賠率
        if ($max == 1) {  //全部玩法賠率都不同
          foreach ($arrOdds as $oKey => $odd) {
            if (strlen($str2)) {$str2 .= ', ';}
            $str2 .= "{$arr[$oKey]}: {$odd}";
          }
        } else {  //有些玩法賠率相同
          foreach ($arrOdds as $oKey => $odd) {
            if ($odd != $maxTitle) {
              if (strlen($str2)) {$str2 .= ', ';}
              $str2 .= "{$arr[$oKey]}: {$odd}";
            }
          }
          if (strlen($str2)) {$str2 .= ', ';}
          $str2 .= "其餘為: {$maxTitle}";
        }
      }
    } elseif ($mode==8) {  //冠亞和指定數(未開放)

    } elseif ($mode==9) {  //龍虎, 1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97,1.97
      $max = 0;
      $maxTitle = null;
      $arr = array('1vs10 龍','1vs10 虎','2vs9 龍','2vs9 虎','3vs8 龍','3vs8 虎','4vs7 龍','4vs7 虎','5vs6 龍','5vs6 虎');
      //找出最多賠率出現次數
      foreach ($arrOddCounts as $cKey => $count) {
        if ($count > $max) {
          $max = $count;  //最多出現次數
          $maxTitle = $cKey;  //出現最多的賠率
        }
      }
      if ($max == sizeof($arr)) {  //各玩法均為該賠率
        $str = "均為 {$maxTitle}";
      } else {
        $str2 = '';
        //找出不同於最多次數的賠率並詳列玩法名稱及賠率
        if ($max == 1) {  //全部玩法賠率都不同
          foreach ($arrOdds as $oKey => $odd) {
            if (strlen($str2)) {$str2 .= ', ';}
            $str2 .= "{$arr[$oKey]}: {$odd}";
          }
        } else {  //有些玩法賠率相同
          foreach ($arrOdds as $oKey => $odd) {
            if ($odd != $maxTitle) {
              if (strlen($str2)) {$str2 .= ', ';}
              $str2 .= "{$arr[$oKey]}: {$odd}";
            }
          }
          if (strlen($str2)) {$str2 .= ', ';}
          $str2 .= "其餘為: {$maxTitle}";
        }
      }
    }
    return $str;
  }

  protected function _getBetNumbersByStr($argModeId, $argBetNumStr) {
    $mode = intVal(trim($argModeId));
    $str = '';
    if ($mode==0) {
      //...
    } elseif ($mode==1) {
      //猜名次,
      //  冠軍  亞軍  季軍  殿軍  第5   第6   第7   第8   第9   第10
      //  01~10|01~10|01~10|01~10|01~10|01~10|01~10|01~10|01~10|01~10

      $arrTitles = array(
        0=>array('冠軍', 'title-no-1'),
        1=>array('亞軍', 'title-no-2'),
        2=>array('季軍', 'title-no-3'),
        3=>array('殿軍', 'title-no-4'),
        4=>array('第 5', 'title-no-5'),
        5=>array('第 6', 'title-no-6'),
        6=>array('第 7', 'title-no-7'),
        7=>array('第 8', 'title-no-8'),
        8=>array('第 9', 'title-no-9'),
        9=>array('第 10', 'title-no-10'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $arr2 = explode(',', $aVal);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-1 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>";
          foreach ($arr2 as $aKey2 => $aVal2) {
            $str .= "<div class=\"bj-bet-num mode-1-num inline\">{$aVal2}</div>";
          }
        }
      }
    } elseif ($mode==2) {  //猜冠亞軍, 01~10|01~10

      $arrTitles = array(
        0=>array('冠軍', 'title-no-1'),
        1=>array('亞軍', 'title-no-2'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $arr2 = explode(',', $aVal);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-2 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>";
          foreach ($arr2 as $aKey2 => $aVal2) {
            $str .= "<div class=\"bj-bet-num mode-2-num inline\">{$aVal2}</div>";
          }
        }
      }

    } elseif ($mode==3) {  //猜前三名, 01~10|01~10|01~10

      $arrTitles = array(
        0=>array('冠軍', 'title-no-1'),
        1=>array('亞軍', 'title-no-2'),
        2=>array('季軍', 'title-no-3'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $arr2 = explode(',', $aVal);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-3 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>";
          foreach ($arr2 as $aKey2 => $aVal2) {
            $str .= "<div class=\"bj-bet-num mode-3-num inline\">{$aVal2}</div>";
          }
        }
      }

    } elseif ($mode==4) {  //猜前四名(未開放

      $arrTitles = array(
        0=>array('冠軍', 'title-no-1'),
        1=>array('亞軍', 'title-no-2'),
        2=>array('季軍', 'title-no-3'),
        3=>array('殿軍', 'title-no-4'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $arr2 = explode(',', $aVal);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-4 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>";
          foreach ($arr2 as $aKey2 => $aVal2) {
            $str .= "<div class=\"bj-bet-num mode-4-num inline\">{$aVal}</div>";
          }
        }
      }

    } elseif ($mode==5) {  //猜前五名(未開放

      $arrTitles = array(
        0=>array('冠軍', 'title-no-1'),
        1=>array('亞軍', 'title-no-2'),
        2=>array('季軍', 'title-no-3'),
        3=>array('殿軍', 'title-no-4'),
        4=>array('第5名', 'title-no-5'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $arr2 = explode(',', $aVal);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-5 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>";
          foreach ($arr2 as $aKey2 => $aVal2) {
            $str .= "<div class=\"bj-bet-num mode-5-num inline\">{$aVal}</div>";
          }
        }
      }

    } elseif ($mode==6) {  //大小單雙, 0,1|0,1|0,1|0,1|0,1|0,1

      $arrTitles = array(
        0=>array('冠軍大小', 'title-no-1', 'bigsmall'),
        1=>array('冠軍單雙', 'title-no-1', 'oddeven'),
        2=>array('亞軍大小', 'title-no-2', 'bigsmall'),
        3=>array('亞軍單雙', 'title-no-2', 'oddeven'),
        4=>array('季軍大小', 'title-no-3', 'bigsmall'),
        5=>array('季軍單雙', 'title-no-3', 'oddeven'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $twoFaceStr = getTwoFaceStrByStr($aVal, $arrTitles[$aKey][2]);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-6 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>:{$twoFaceStr}";
        }
      }

    } elseif ($mode==7) {  //冠亞和大小單雙, 0,1|0,1

      $arrTitles = array(
        0=>array('冠亞和大小', 'title-no-1', 'bigsmall'),
        1=>array('冠亞和單雙', 'title-no-1', 'oddeven'),
      );
      $arr = explode('|', $argBetNumStr);
      foreach ($arr as $aKey => $aVal) {
        if (strlen($aVal)) {
          $twoFaceStr = getTwoFaceStrByStr($aVal, $arrTitles[$aKey][2]);
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-7 {$arrTitles[$aKey][1]} inline\">{$arrTitles[$aKey][0]}</div>:{$twoFaceStr}";
        }
      }

    } elseif ($mode==8) {  //冠亞和指定數(未開放)

    } elseif ($mode==9) {  //龍虎, 0,1|0,1|0,1|0,1|0,1

      $arr = explode('|', $argBetNumStr);
      for ($i=0; $i<5; ++$i) {
        if (strlen($arr[$i])) {
          $twoFaceStr = getTwoFaceStrByStr($arr[$i], 'dragontiger');
          $h = $i+1;
          $t = 10-$i;
          if (strlen($str)) {$str .= '<br/>';}
          $str .= "<div class=\"bj-bet-num-title mode-9 inline\">{$h}vs{$t}</div>:{$twoFaceStr}";
        }
      }
    }
    return $str;
  }

}
