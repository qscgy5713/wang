<?php
//og 東方真人二代
class GameOgModel extends ApiModel 
{
  protected $cfg_base_url = 'https://middleware.oriental-game.com';
  protected $cfg_report_base_url = 'http://ares.oriental-game.com';
  protected $cfg_agent = 'mog080wkyl';
  //protected $cfg_agent_password = 'GlxLmIJKvSn0Vwgs';  //應為後台密碼
  protected $cfg_agent_key = 'GlxLmIJKvSn0Vwgs';

  protected $og2_token = null;
  //protected $og2_token_retrive_ts = null;  //token取得時的timestamp。用以計算屆壽否

  const OG2_ACCOUNT_PRECEDING = 'WKYL_';  //帳號前綴字
  const OG2_RESPONSE_SUCCESS_CODE = 'success';
  const OG2_DEFAULT_REQUEST_METHOD = 'POST';
  const OG2_CURL_CONNECTTIMEOUT_MS = 8000;
  const OG2_CURL_TIMEOUT_MS = 28000;
  //const OG2_TOKEN_ALIVE_TIME_SEC = 1500;  //token自取得後可以持續使用的時間長度。理論上是30分鐘=1800s

  const OG2_DEFAULT_EMAIL = 'test@email.com';
  const OG2_DEFAULT_COUNTRY = 'China';  //预设为 China 中国。此参数虽然必填，但并不强制验证。因此只要有待入英文字串即可
  const OG2_DEFAULT_LANGUAGE = 'cn';  //Allowed values: "en - English", "cn - Simplified Chinese", "kr - Korean"
  const OG2_DEFAULT_BIRTHDATE = '1990-01-01';

  //const OG2_DEFAULT_LANG_CODE = 'zh_TW';
  //const OG2_HANDICAP_MAX_WIN_LIMIT = 60000;
  //const OG2_HANDICAP_MAX_LOSE_LIMIT = 0;  //0=no limit

  const OG2_REPORT_DATETIME_FORMAT = 'Y-m-d H:i:s';
  //const OG2_REPORT_DATE_FORMAT = 'Y-m-d';
  const OG2_REPORT_TIMEZONE_OFFSET = 8;

  protected $OG2_CURL_DATAS = array(
        CURLOPT_CUSTOMREQUEST => 'GET',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_CONNECTTIMEOUT_MS => self::OG2_CURL_CONNECTTIMEOUT_MS ,
        CURLOPT_TIMEOUT_MS => self::OG2_CURL_TIMEOUT_MS,
  );

  

	/*
	 * 如果有初始化 可以設定在初始化中
	 */
	protected function _initialize() {
		parent::_initialize();
	}

  //--------------------通用函數--------------------
	/**
	 * 註冊新會員
	 * @param $data['username'] 會員帳號
	 * @param $data['email'] email(非必須)
   * @param $data['country'] country(非必須)
   * @param $data['language'] language(非必須)
   * @param $data['birthdate'] birthdate(非必須)
   * @param &$err 盛裝錯誤(非必須)
	 * @return 結果(bool)
	 */
	public function createMember($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {

      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $this->og2_token = $this->getToken($err);

    $apiMethod = 'POST';
    $action = 'register';
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'username' => $account,
      'fullname' => strtoupper($account),
      'country' => self::OG2_DEFAULT_COUNTRY,
      'email' => self::OG2_DEFAULT_EMAIL,
      'language' => self::OG2_DEFAULT_LANGUAGE,
      'birthdate' => self::OG2_DEFAULT_BIRTHDATE,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === "success"){
        return true;
      } else {
        // 開立帳號失敗
        $err = $rs_array['data']['message'];
        return false;
      }
    }
	}

  /**
   * 會員登入
   * @param $data['account'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 遊戲URL(string)
   */
  public function loginMember($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'is_mobile' => array('required'=>0,'default'=>false,),
    );

    foreach ($arrKeys as $dk => $dv) {

      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }
    $gameKey = $this->getGameKey(array(
      'account' => $account,
    ), $err);

    if ($gameKey === false) {
      return false;
    }

    if ($is_mobile) {
      $deviceType = 'mobile';
    } else {
      $deviceType = 'desktop';
    }
    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'GET';
    $providerId = 1;
    $action = "game-providers/{$providerId}/play";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'key' => $gameKey,
      'type' => $deviceType,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === "success"){
        return $rs_array['data']['url'];
      } else {
         // 取得遊戲連結失敗
        $err = '取得遊戲連結失敗';
        return false;
      }
    }
  }


  /**
   * 取得會員餘額
   * @param $data['account'] 會員帳號
   * @param &$err 盛裝錯誤(非必須)
   * @return 餘額(number)
   */
  public function getMemberBalance($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {

      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'GET';
    $providerId = 1;
    $action = "game-providers/{$providerId}/balance";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'providerId' => $providerId,
      'username' => $account,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === "success"){
        return $rs_array['data']['balance'];
      } else { // 開立帳號失敗
        $err = $rs_array['data']['message'];
        return false;
      }
    }
  }

	/**
	 * 下點(提款)
   * @param $data['account'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 訂單號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(bool)
	 */
 
	public function withdrawMemberBalance($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {

      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }


    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }
    $trans_type = 'OUT';
    $amount = abs($amount);
    // 產生交易識別字串
    $t = date('ymdHis');
    $usec = substr(microtime(false), 2, 3);
    $trans_id = substr( "{$t}{$usec}{$trans_type}{$account}", 0, 28 );

    $apiMethod = 'POST';
    $providerId = 1;
    $action = "game-providers/{$providerId}/balance";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'username' => $account,
      'balance' => $amount,
      'action' => $trans_type,
      'transferId' => $trans_id,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === "success"){
          return $rs_array['data']['balance'];
      } else { // 開立帳號失敗
        $err = $rs_array['data']['message'];
        return false;
      }
    }
	}

	/**
	 * 上點(加款)
   * @param $data['account'] 會員帳號
   * @param $data['amount'] 數額
   * @param $data['trans_id'] 訂單號(非必須)
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(bool)
   */
	public function rechargeMemberBalance($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'amount' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {

      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01 必需的KEY不存在'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }


    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }
    $trans_type = 'IN';
    $amount = abs($amount);
    // 產生交易識別字串
    $t = date('ymdHis');
    $usec = substr(microtime(false), 2, 3);
    $trans_id = substr( "{$t}{$usec}{$trans_type}{$account}", 0, 28 );

    $apiMethod = 'POST';
    $providerId = 1;
    $action = "game-providers/{$providerId}/balance";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'username' => $account,
      'balance' => $amount,
      'action' => $trans_type,
      'transferId' => $trans_id,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === "success"){
        return $rs_array['data']['balance'];
      } else { // 開立帳號失敗
        $err = $rs_array['data']['message'];
        return false;
      }
    }
	}

	/**
	 * 抓取注單報表
   * @param $data['begin_datetime'] 起始日期時間
   * @param $data['end_datetime'] 結束日期時間
   * @param &$err 盛裝錯誤(非必須)
   * @return 報表明細(array)
	 */
	public function getGameRecord($data, &$err = null) {
    $arrKeys = array(
      'startTime' => array('required'=>1,),
      'endTime' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $startTime = date(self::OG2_REPORT_DATETIME_FORMAT, strtotime($startTime)-(self::OG2_REPORT_TIMEZONE_OFFSET*3600));  //轉換為+0時區
    $endTime = date(self::OG2_REPORT_DATETIME_FORMAT, strtotime($endTime)-(self::OG2_REPORT_TIMEZONE_OFFSET*3600));  //轉換為+0時區


    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'POST';
    $action = 'Transaction';
    $apiUrl = "{$this->cfg_report_base_url}/{$action}";
    $apiArrData = array(
      'Operator' => $this->cfg_agent,
      'Key' => $this->cfg_agent_key,
        'SDate' => $startTime,
        'EDate' => $endTime,
      'Provider' => 'og',  //游戏供应商. 允许值: "og"
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return false;
    }
    else {
      $rs_array = json_decode($result, TRUE);
      if(!isset($rs_array['State']) || !$rs_array['State'] == 'Error') {
        return $rs_array;
      }
      else { // 取得報表失敗
        $err = $rs_array['Message'];
        return false;
      }
    }
  }
  
  
  const ARR_OG2_GAME_NAME_ID = array(  //NEW
      //0 => '全部遊戲',
      'Baccarat' => '百家樂',
      'DragonTiger' => '龍虎',
      'Roulette' => '輪盤',
      'Sicbo' => '骰寶',
      //15 => '德州撲克',
      'Fantan' => '翻攤',
      //17 => 'AG電子',
      //18 => '彩票',
      //19 => '傑克',
      //20 => '三公',
      'unknown' => '不明的遊戲',
  );
  
  const ARR_OG2_RESULT_TYPE = array(  //NEW
      1 => '輸',2 => '贏',3 => '和',4 => '無效',5 => '未結算','unknown' => '不明的結果',
  );
  
  const ARR_OG2_PLATFORM_ID = array(
      0 => '東方旗艦廳',
      1 => 'BC',
      2 => 'AG',
      5 => '明升',
      6 => '美高',
      7 => '歐博',
      8 => 'Laxino',
      13=> 'ZZH 至尊會',
      14=> 'HABANERO',
      15=> 'PT',
      21=> '東方錦繡廳',
      22=> '東方鴻盛廳',
      'unknown' => '不明的平台',
  );
  
  const ARR_OG2_POKER_FACE = array(
      1 => '方塊',2 => '梅花',3 => '紅心',4 => '黑桃','unknown' => '不明的撲克花色',
  );
  
  const ARR_OG2_POKER_POINT = array(
      1 => 'A',2 => '2',3 => '3',4 => '4',5 => '5',6 => '6',7 => '7',8 => '8',9 => '9',10 => '10',11 => 'K',12 => 'Q',13 => 'J','unknown' => '不明的撲克點數',
  );
  const ARR_OG2_BACCARAT_RESULT_ID = array(
      'a'=>'莊','b'=>'莊,閒對','c'=>'莊,莊對','d'=>'莊,莊對,閒對','e'=>'閒','f'=>'閒,閒對','g'=>'閒,莊對','h'=>'閒,莊對,閒對','i'=>'和','j'=>'和,閒對','k'=>'和,莊對','l'=>'和閒對,莊和閒對,莊對',
  );
  
  const ARR_OG2_BET_CODE = array(
      'Baccarat' => array(  //'百家樂',
          101 =>'閒',102 =>'莊',103 =>'和',104 =>'閒對',105 =>'莊對',126 =>'Super6',
      ),
      'DragonTiger' => array(  //'龍虎',
          201 => '龍',202 => '虎',203 => '和',
      ),
      'Roulette' => array(  //'輪盤',
          501=>'1',502=>'2',503=>'3',504=>'4',505=>'5',506=>'6',507=>'7',508=>'8',509=>'9',510=>'10',511=>'11',512=>'12',513=>'13',514=>'14',515=>'15',516=>'16',517=>'17',518=>'18',519=>'19',520=>'20',521=>'21',522=>'22',523=>'23',524=>'24',525=>'25',526=>'26',527=>'27',528=>'28',529=>'29',530=>'30',531=>'31',532=>'32',533=>'33',534=>'34',535=>'35',536=>'36',537=>'0',538=>'分注[3,0]',539=>'分注[3,6]',540=>'分注[6,9]',541=>'分注[9,12]',542=>'分注[12,15]',543=>'分注[15,18]',544=>'分注[18,21]',545=>'分注[21,24]',546=>'分注[24,27]',547=>'分注[27,30]',548=>'分注[30,33]',549=>'分注[33,36]',550=>'分注[2,3]',551=>'分注[5,6]',552=>'分注[8,9]',553=>'分注[11,12]',554=>'分注[14,15]',555=>'分注[17,18]',556=>'分注[20,21]',557=>'分注[23,24]',558=>'分注[26,27]',559=>'分注[29,30]',560=>'分注[32,33]',561=>'分注[35,36]',562=>'分注[2,0]',563=>'分注[2,5]',564=>'分注[5,8]',565=>'分注[8,11]',566=>'分注[11,14]',567=>'分注[14,17]',568=>'分注[17,20]',569=>'分注[20,23]',570=>'分注[23,26]',571=>'分注[26,29]',572=>'分注[29,32]',573=>'分注[32,35]',574=>'分注[1,2]',575=>'分注[4,5]',576=>'分注[7,8]',577=>'分注[10,11]',578=>'分注[13,14]',579=>'分注[16,17]',580=>'分注[19,20]',581=>'分注[22,23]',582=>'分注[25,26]',583=>'分注[28,29]',584=>'分注[31,32]',585=>'分注[34,35]',586=>'分注[1,0]',587=>'分注[1,4]',588=>'分注[4,7]',589=>'分注[7,10]',590=>'分注[10,13]',591=>'分注[13,16]',592=>'分注[16,19]',593=>'分注[19,22]',594=>'分注[22,25]',595=>'分注[25,28]',596=>'分注[28,31]',597=>'分注[31,34]',598=>'三數[2,3,0]',599=>'三數[1,2,0]',600=>'街注[1,2,3]',601=>'街注[4,5,6]',602=>'街注[7,8,9]',603=>'街注[10,11,12]',604=>'街注[13,14,15]',605=>'街注[16,17,18]',606=>'街注[19,20,21]',607=>'街注[22,23,24]',608=>'街注[25,26,27]',609=>'街注[28,29,30]',610=>'街注[31,32,33]',611=>'街注[34,35,36]',612=>'角注[2,5,3,6]',613=>'角注[5,8,6,9]',614=>'角注[8,11,9,12]',615=>'角注[11,14,12,15]',616=>'角注[14,17,15,18]',617=>'角注[17,20,18,21]',618=>'角注[20,23,21,24]',619=>'角注[23,26,24,27]',620=>'角注[26,29,27,30]',621=>'角注[29,32,30,33]',622=>'角注[32,35,33,36]',623=>'角注[1,4,2,5]',624=>'角注[4,7,5,8]',625=>'角注[7,10,8,11]',626=>'角注[10,13,11,14]',627=>'角注[13,16,14,17]',628=>'角注[16,19,17,20]',629=>'角注[19,22,20,23]',630=>'角注[22,25,23,26]',631=>'角注[25,28,26,29]',632=>'角注[28,31,29,32]',633=>'角注[31,34,32,35]',634=>'四個號碼[1,2,3,0]',635=>'線注[1,2,3,4,5,6]',636=>'線注[4,5,6,7,8,9]',637=>'線注[7,8,9,10,11,12]',638=>'線注[10,11,12,13,14,15]',639=>'線注[13,14,15,16,17,18]',640=>'線注[16,17,18,19,20,21]',641=>'線注[19,20,21,22,23,24]',642=>'線注[22,23,24,25,26,27]',643=>'線注[25,26,27,28,29,30]',644=>'線注[28,29,30,31,32,33]',645=>'線注[31,32,33,34,35,36]',646=>'列[3,6,9,12,15,18,21,24,27,30,33,36]',647=>'列[2,5,8,11,14,17,20,23,26,29,32,35]',648=>'列[1,4,7,10,13,16,19,22,25,28,31,34]',
          //649=>'第一打[1,2,3,4,5,6,7,8,9,10,11,12]',//650=>'第二打[13,14,15,16,17,18,19,20,21,22,23,24]',//651=>'第三打[25,26,27,28,29,30,31,32,33,34,35,36]',//652=>'小[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]',//653=>'雙[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36]',//654=>'紅[1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36]',//655=>'黑[2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35]',//656=>'單[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35]',//657=>'大[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]',
          649=>'第一打',650=>'第二打',651=>'第三打',652=>'小',653=>'雙',654=>'紅',655=>'黑',656=>'單',657=>'大',
      ),
      'Sicbo' => array(  //'骰寶',
          401=>'點數4',402=>'點數5',403=>'點數6',404=>'點數7',405=>'點數8',406=>'點數9',407=>'點數10',408=>'點數11',409=>'點數12',410=>'點數13',411=>'點數14',412=>'點數15',413=>'點數16',414=>'點數17',415=>'小',416=>'大',417=>'三軍1',418=>'三軍2',419=>'三軍3',420=>'三軍4',421=>'三軍5',422=>'三軍6',423=>'短牌1',424=>'短牌2',425=>'短牌3',426=>'短牌4',427=>'短牌5',428=>'短牌6',429=>'團骰1',430=>'團骰2',431=>'團骰3',432=>'團骰4',433=>'團骰5',434=>'團骰6',435=>'全骰',436=>'長牌1~2',437=>'長牌1~3',438=>'長牌1~4',439=>'長牌1~5',440=>'長牌1~6',441=>'長牌2~3',442=>'長牌2~4',443=>'長牌2~5',444=>'長牌2~6',445=>'長牌3~4',446=>'長牌3~5',447=>'長牌3~6',448=>'長牌4~5',449=>'長牌4~6',450=>'長牌5~6',451=>'單',452=>'雙',453=>'112',454=>'113',455=>'114',456=>'115',457=>'116',458=>'122',459=>'133',460=>'144',461=>'155',462=>'166',463=>'223',464=>'224',465=>'225',466=>'226',467=>'233',468=>'244',469=>'255',470=>'266',471=>'334',472=>'335',473=>'336',474=>'344',475=>'355',476=>'366',477=>'445',478=>'446',479=>'455',480=>'466',481=>'556',482=>'566',483=>'123',484=>'124',485=>'125',486=>'126',487=>'134',488=>'135',489=>'136',490=>'145',491=>'146',492=>'156',493=>'234',494=>'235',495=>'236',496=>'245',497=>'246',498=>'256',499=>'345',4100=>'346',4101=>'356',4102=>'456',
      ),
      'Fantan' => array(  //'翻攤',
          742 =>'正 1',743 =>'正 2',744 =>'正 3',745 =>'正 4',746 =>'角1_2',747 =>'角2_3',748 =>'角3_4',749 =>'角4_1',750 =>'1 番',751 =>'2 番',752 =>'3 番',753 =>'4 番',754 =>'1 念2',755 =>'1 念3',756 =>'1 念4',757 =>'2 念1',758 =>'2 念3',759 =>'2 念4',760 =>'3 念1',761 =>'3 念2',762 =>'3 念4',763 =>'4 念1',764 =>'4 念2',765 =>'4 念3',766 =>'單',767 =>'雙',768 =>'1,2 四 通',769 =>'1,2 三 通',770 =>'1,3 四 通',771 =>'1,3 二 通',772 =>'1,4 三 通',773 =>'1,4 二 通',774 =>'2,3 四 通',775 =>'2,3 一 通',776 =>'2,4 三 通',777 =>'2,4 一 通',778 =>'3,4 二 通',779 =>'3,4 一 通',780 =>'三門(3,2,1)',781 =>'三門(2,1,4)',782 =>'三門(1,4,3)',783 =>'三門(4,3,2)',
      ),
      //15 => array(),  //'德州撲克',
      //17 => array(),  //'AG電子',
      //18 => array(),  //'彩票',
      //19 => array(),  //'傑克',
      //20 => array(),  //'三公',
  );

  /**
   * 取得解析過的人類可讀報表明細
   * @param detail_id           注單ID
   * @param member_id           會員ID
   * @param member_account      會員帳號
   * @param agent_id            代理ID
   * @param agent_account       代理帳號
   * @param agent_tree          代理樹
   * @param ratio_tree          佔成樹
   * @param detail_gameAccount  遊戲帳號
   * @param detail_orderDate    帳務日(timestamp)
   * @param detail_bettingMoney 投注額
   * @param detail_surplus      輸贏
   * @param detail_effective    有效投注額
   * @param detail_backWater    退水
   * @param detail_isBackWater  是否已退水
   * @param detail_dataInJson   主注單其餘資料(json格式@varchar)
   * @param detail_subbetInJson 子注單資料(json格式@varchar). 無用.
   *
   * @return 報表明細(array). 回傳2d-array 基本上長得跟傳入差不多，但是多了以下的key
   * + game_name_str     遊戲名稱
   * + table_no          桌號
   * + round_no          局號
   * + bet_numbers       投注
   * + bet_result        遊戲結果 --> 目前尚不可用
   * + sb_html           有格式的子注單. 無用.
   */
  public function getReportRows($argArrRowBetDetails) {

    $arrBets = array();
    if ($argArrRowBetDetails) {
      foreach ($argArrRowBetDetails as $bi => $arrBet) {
        $detail_id = $arrBet['detail_id'];

        $arrBetContents = json_decode($arrBet['detail_dataInJson'], true);
        $gamename = $arrBetContents['gamename'];  //gamename  游戏名称(注1). ex. Baccarat
        $bet = $arrBetContents['bet'];  //bet 下注区域(注2)
        $winloseresult = $arrBetContents['winloseresult'];  //winloseresult 输赢结果(注3)
        //$currency = $arrBetContents['currency'];  //货币
        //$gamecategory = $arrBetContents['gamecategory'];  //游戏类型
        //$balance = $arrBetContents['balance'];  //余额
        $arrBet['table_no'] = $arrBetContents['gameid'];  //游戏桌号
        $arrBet['round_no'] = $arrBetContents['roundno'];  //靴局

        $gameNameStr = $this->getArrayValueByKey(self::ARR_OG2_GAME_NAME_ID, $gamename);
        $arrBet['game_name_str'] = $gameNameStr;
        //$betStr = $this->_getBetStr($gamename, $bet);
        $betStr = $this->getArrayValueByKey(self::ARR_OG2_BET_CODE[$gamename], $bet);

        //著色投注
        if ($gamename == 'Baccarat') {  //只針對百家樂類做著色
          if ((strpos($betStr,'閒')!==false)&&(strpos($betStr,'閒對')===false)) {$betStr = "<div class=\"ab-betting-bac-player\">{$betStr}</div>";}
          elseif ((strpos($betStr,'莊')!==false)&&(strpos($betStr,'莊對')===false)) {$betStr = "<div class=\"ab-betting-bac-banker\">{$betStr}</div>";}
          elseif (strpos($betStr,'和')!==false) {$betStr = "<div class=\"ab-betting-bac-none\">{$betStr}</div>";}
          //$arrBet['bet_numbers'] = $betStr;
        }
        $arrBet['bet_numbers'] = $betStr;

        $arrBet['bet_result'] = '';

        $arrBet['sb_html'] = null;
        $arrBets[] = $arrBet;
      }
      return $arrBets;
    } else {
      return false;
    }
  }

  //--------------------PUBLIC 非通用函數--------------------

  /**
   * 设定单一玩家限红.
   * @param $data['account'] 會員帳號
   * @param $data['video_limit_id'] 真人限紅代號
   * @param $data['roulette_limit_id'] 輪盤限紅代號
   * @param &$err 盛裝錯誤(非必須)
   * @return 新的預設限紅(array)
   */
  public function setUserBetLimitId($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'video_limit_id' => array('required'=>1,),
      'roulette_limit_id' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = lang(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'POST';
    $providerId = 1;
    $action = "game-providers/{$providerId}/setBetLimit";
    $apiUrl = "{$this->cfg_base_url}/{$action}";

    $apiArrData = array(
      'username' => $account,
      array(
        'video' => $video_limit_id,
        'roulette' => $roulette_limit_id,
      ),
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;
    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);

    if($result === false){
      return false;
    }
    else {
/*
      正確回傳 => 陣列
      錯誤回傳 => array(3) { ["status"]=> string(5) "error" ["data"]=> array(1) { ["message"]=> string(18) "Invalid parameter." } ["meta"]=> array(1) { ["msg"]=> string(17) "nothing to update" } }
*/ 
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] == 'error') { // 取得報表失敗
        $err = $rs_array['data']['message'];
        return false;
      }
      else {
        return $rs_array;
      }
    }
  }


  public function setUserBetLimitId_old($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      'video_limit_id' => array('required'=>1,),
      'roulette_limit_id' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "_{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "_{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'POST';
    $providerId = 1;
    $action = "game-providers/{$providerId}/setBetLimit";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'username' => $_account,
      array(
        'video' => $_video_limit_id,
        'roulette' => $_roulette_limit_id,
      ),
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false) {
      return false;
    } else {
      $result = json_decode($result, true);
      if($rs_array['status'] === "success"){
        return $result;
      } else {
        $err = $result['data']['message'];
        return false;
      }
    }
  }

  /**
   * 修改预设限红, 会对下一次注册的玩家进行生效.
   * @param $data['video_limit_id'] 真人限紅代號
   * @param $data['roulette_limit_id'] 輪盤限紅代號
   * @param &$err 盛裝錯誤(非必須)
   * @return 新的預設限紅(array)
   */
  public function setDefaultBetLimitId($data, &$err = null) {

    $arrKeys = array(
      'video_limit_id' => array('required'=>1,),
      'roulette_limit_id' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = L(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }



    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'POST';
    $providerId = 1;
    $action = "game-providers/{$providerId}/setDefaultBetLimit";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
   
    $apiArrData = array(
      'video' => $video_limit_id,
      'roulette' => $roulette_limit_id,
    );

    $apiArrHeader = array(
      "X-Token: {$this->og2_token}", 
    );

    //$dataInJson = json_encode($apiArrData);

    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    $this->OG2_CURL_DATAS[CURLOPT_POST] = true;

    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    }
    else {
/*
      正確回傳 => string(63) "{"status":"success","data":{"videolimit":69,"roulettelimit":6}}"
      錯誤回傳 => string(92) "{"status":"error","data":{"message":"Failed to connect."},"meta":{"token":"invalid token."}}"
*/ 
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] === 'success') {
        return $rs_array;
      }
      else { // 取得報表失敗
        $err = $rs_array['data']['message'];
        return false;
      }
    }
  }

  /**
   * get game key
   * @param $data['account'] 會員帳號
   * @param $data['game_code'] 遊戲代號
   * @param &$err 盛裝錯誤(非必須)
   * @return 結果(bool)
   */
  
  public function getGameKey($data, &$err = null) {
    $arrKeys = array(
      'account' => array('required'=>1,),
      //'game_code' => array('required'=>1,),
    );

    foreach ($arrKeys as $dk => $dv) {
      $dk = strtolower($dk);
      $isKeyRequired = ($dv['required']==1);
      if ( array_key_exists($dk, $data) ) {
        $temp = "{$dk}";
        $$temp = $data[$dk];
      } else {
        if ($isKeyRequired) {
          $err = lang(strtoupper('ERROR_' . __CLASS__ . '_' . __FUNCTION__ . '_01'));  //必需的KEY不存在
          return false;
        } else {
          if ( array_key_exists('default', $dv) ) {
            $temp = "{$dk}";
            $$temp = $dv['default'];
          }
        }
      }
    }

    $this->og2_token = $this->getToken($err);
    if ($this->og2_token === false) {
      return false;
    }

    $apiMethod = 'GET';
    $providerId = 1;
    $gameCode = 'oglive';
    $action = "game-providers/{$providerId}/games/{$gameCode}/key";
    $apiUrl = "{$this->cfg_base_url}/{$action}";
    $apiArrData = array(
      'username' => $account,
      'code' => $gameCode,
    );

    $apiArrHeader = array(
        "X-Token: {$this->og2_token}", 
    );
    //$dataInJson = json_encode($apiArrData);
    $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
    $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
    //$this->OG2_CURL_DATAS[CURLOPT_POST] = true;
    $apiCurlDatas = $this->OG2_CURL_DATAS;

    $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
    if($result === false){
      return false;
    }
    else {
/*
      正確回傳 => string(226) "{"status":"success","data":{"key":"ac07a5410faf90532894d3769f03b8d0ce52a3fb9f58aadb34501e5096893ffd44c5c6623aa0a16da87b05c0783ecea8a972d0576ced8f07690d8afda116dc7d171729dc73f40c807b113ebc7fede28cb15b6a885cbbaa8e90848cbaa6c6"}}"

      錯誤回傳 => string(99) "{"status":"error","data":{"message":"Missing parameter."},"meta":{"username":"must not be empty."}}"
*/ 
      $rs_array = json_decode($result, TRUE);
      if($rs_array['status'] == 'error') { // 開立帳號失敗
        $err = $rs_array['data']['message'];
        return false;
      }
      else {
        return $rs_array['data']['key'];
      }
    }
  }


  /**
   * 取得可用於API操作的token
   * @return 結果(string/bool)
   */
  public function getToken($err = null) {
      if(empty($this->og2_token)){
          $apiUrl = $this->cfg_base_url.'/token';
          $apiMethod = 'GET';
          $apiArrData = array();
          $apiArrHeader = array(
              "X-Operator: ".$this->cfg_agent,
              "X-Key: ".$this->cfg_agent_key
          );
          
          $this->OG2_CURL_DATAS[CURLOPT_CUSTOMREQUEST] = $apiMethod;
          $this->OG2_CURL_DATAS[CURLOPT_HTTPHEADER] = $apiArrHeader;
          $apiCurlDatas = $this->OG2_CURL_DATAS;
          
          $result = $this->sendRequest($apiUrl, $apiMethod, $apiCurlDatas, $apiArrData, $err);
          if($result === false){
              return false;
          } else {
              /* 成功回傳, 失敗無任何回傳
               {
               "status": "success",
               "data": {
               "token": "WJKQ0XueOFLBdtR5YXzltEnI7mIy1SoI07r7noJ4Xnmkl5g6AVtSt9kJbkr5N0xYSOQc9ROe59UfoRsuvEsAOwMAfLVCjdK5D0jbHDhzWbb3kfosKKMarS4ljfQTq5Sj8YhtV7hcUsr2IJaX1waeHT0gcGjzaQQPjnlfbkYeM2fiTbs8mtTV1gGTlOvNDVPjjiNF8wyahLkI2n7bQDz4MEW3z69a0YHyl9K78mUCUkMpZJ5ZJh2vuwWmAQ"}
               }
               */
              $rs_array = json_decode($result, TRUE);
              if($rs_array['status'] === 'success') { 
                  return $rs_array['data']['token'];
                  
              } else {
                  // 取得API token 資料發生錯誤
                  $err = '取得API token 資料發生錯誤';
                  return false;
              }
          }
      } else {
          return $this->og2_token;
      }
  }
/*
  public static function getBetDate($argBetDate, &$argSplitTimestamp=null) {
    $betTime = strtotime($argBetDate);
    $splitTime = strtotime(date('Y-m-d',$betTime).' 12:00:00');  //下注當日的12:00:00
    $argSplitTimestamp = $splitTime;
    if ($betTime >= $splitTime) {  //算到隔天的1200
      $targetDate = date('Y-m-d',$betTime);
    } else {  //算成前日
      $targetDate = date('Y-m-d',$betTime-60*60*24);
    }
    return $targetDate;
  }
*/
  public static function getArrayValueByKey($arrArray, $arrKey) {
    if (array_key_exists($arrKey, $arrArray)) {
      return $arrArray[$arrKey];
    } else {
      if (array_key_exists('unknown', $arrArray)) {
        return "{$arrArray['unknown']}({$arrKey})";
      } else {
        'Unknown key';
      }
    }
  }

	//--------------------非通用函數--------------------

  //取得投注項目的文字
  /*
  protected function _getBetStr($argGameId, $argBettingContent) {
    $ret = '';
    $gameId = trim($argGameId);
    $arr = explode(',', $argBettingContent);
    if (sizeof($arr)) {
      foreach ($arr as $ak => $arrBetItems) {
        if (strlen(trim($arrBetItems))) {
          $arr2 = explode('^', $arrBetItems);
          if (sizeof($arr2)) {
            $betItemCode = trim($arr2[0]);
            $betAmount = floatVal($arr2[1])+0;
            $winLoss = $arr2[2];
            if (strlen($betItemCode)) {
              if (strlen($ret)) {$ret .= ',';}
              if (array_key_exists($gameId, self::ARR_OG2_BET_CODE)) {
                if (array_key_exists($betItemCode, self::ARR_OG2_BET_CODE[$gameId])) {
                  $betItem = self::ARR_OG2_BET_CODE[$gameId][$betItemCode];
                  if (sizeof($arr)===2) {
                    $ret .= "【{$betItem}】";
                  } else {
                    $ret .= "【{$betItem}】x{$betAmount}";
                  }
                } else {
                  $ret .= "不存在的投注代碼({$betItemCode})";
                }
              } else {
                $ret .= "不存在的遊戲({$gameId})";
              }
            }
          }
        }
      }
      return $ret;
    }
    return false;
  }
*/
  /*
  //遊戲結果尚不可用
  protected function _getGameResultStr($argGameId, $argResult) {
    if (($argGameId==11)||($argGameId==12)) {  //11=百家樂,12=龍虎
      return self::getArrayValueByKey(self::ARR_OG2_BACCARAT_RESULT_ID, $argResult);
    } elseif ($argGameId==13) {  //輪盤
      return "【{$argResult}】";
    } elseif ($argGameId==14) {  //骰寶
      $ret = '';
      $len = strlen($argResult);
      for ($i=0; $i<$len; ++$i) {
        if (strlen($ret)) {$ret .= ',';}
        $num = substr($argResult, $i, 1);
        $ret .= "【{$num}】";
      }
      return $ret;
    } elseif ($argGameId==15) {  //德州撲克
      return '德州撲克結果...';
    } elseif ($argGameId==16) {  //翻攤
      return "【{$argResult}】";
    } elseif ($argGameId==17) {  //AG電子
      return 'AG電子結果...';
    }
    return "無法解析結果({$argGameId},{$argResult})";
  }
  */

  /**
   * 檢驗CLASS內的token是否可用
   * @param 不需要
   * @return 結果(bool)
   */
  /*
  protected function _isTokenAvailable() {
    if (
      ($this->og2_token === null)
      || ($this->og2_token_retrive_ts === null)
      || ( ($this->og2_token_retrive_ts+self::OG2_TOKEN_ALIVE_TIME_SEC) >= time() )
    ) {
      return false;
    }
    return true;
  }
*/
  /**
   * 重設CLASS內的token為初始狀態
   * @param 不需要
   * @return 結果(bool)
   */
  /*
  protected function _resetToken() {
    if (($this->og2_token = null) && ($this->og2_token_retrive_ts = null)) {
      return true;
    }
    return false;
  }
  */
  /**
   * 設定CLASS內的token
   * @param argToken token本身
   * @param argTokenRetrieveTimestamp 取得token的時間
   * @return 結果(bool)
   */
  /*
  protected function _setToken($argToken, $argTokenRetrieveTimestamp) {
    if (($this->og2_token = $argToken) && ($this->og2_token_retrive_ts = $argTokenRetrieveTimestamp)) {
      return true;
    }
    return false;
  }
  */
}